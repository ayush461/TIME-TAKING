//dp,rec,backtracking mei fark jyda ni hai backt krte jb har possible soln dekhna padta,aur isme bhi dp apply kr skte agr overlaping subprob hua toh
//space optimization ke liye tabulation krna hi hoga and can think of further reducing the SC.

//LIS BS approach when inputs is large ,therefore dp approach of n*n will give TLE
int lengthOfLIS(vector<int>& nums) {
        vector<int> temp;
        temp.push_back(nums[0]);
        for(int i=1;i<nums.size();i++){
            if(nums[i] > temp.back()){
                temp.push_back(nums[i]);
            }else{
                int ind = lower_bound(temp.begin(),temp.end(),nums[i]) - temp.begin();
                temp[ind] = nums[i];
            }
        }
        return temp.size();
    }

//LIS using DP approach using 2d arr 
Time Complexity : O(N2)
Space Complexity : O(N)

class Solution {
public:
    vector<int> dp;
    int lengthOfLIS(vector<int>& nums) {
        dp.resize(size(nums)+1, -1);
        return solve(nums, 0, -1);
    }
    int solve(vector<int>& nums, int i, int prev_i) {
        if(i >= size(nums)) return 0;
        if(dp[prev_i+1] != -1) return dp[prev_i+1];
        int take = 0, dontTake = solve(nums, i + 1, prev_i);
        if(prev_i == -1 || nums[i] > nums[prev_i])
            take = 1 + solve(nums, i + 1, i);
        return dp[prev_i+1] = max(take, dontTake);
    }
};



Frog Jump with K Distance  TC:O(N*K)


int cal(vector<int>&nums,int k,int n,int i,vector<int>&dp){
	
	if(i==n-1)
		return 0;
	if(i>=n)
		return 1e5;
	int ans=INT_MAX;
	if(dp[i]!=-1)return dp[i];
	//for k jumps
	for(int j=1;j<=k;j++){
		if(j+i<=n)
		int op1=abs(nums[i]-nums[i+j])+cal(nums,k,n,i+j);
		ans=min(ans,op1);
	}
	
	return dp[i]=ans;
	
	
}
int uniquePaths(int m, int n) {
	int n=nums.size();
	vector<int>dp(n+1,-1);
	return cal(nums,k,n,0,dp);
}



House Robber II ,circular houses.

class Solution {
public:
     int cal(vector<int>&nums,int n,int i,vector<int>&dp){
        
        if(i==n-1)
           return nums[i];
        
        if(i>=n)
        return 0;
        if(dp[i]!=-1)return dp[i];
        int op1=0,op2=0;
        //not pick
       op1=cal(nums,n,i+1,dp);
       op2+=nums[i]+cal(nums,n,i+2,dp);
        
        return dp[i]=max(op1,op2);
    }
    int rob(vector<int>& nums) {
        
        int n=nums.size();
        if(n==1)return nums[0];
     
        vector<int>dp(n+1,-1);
      int ans=cal(nums,n,1,dp);
     vector<int>dp1(n+1,-1);
        int ans1=cal(nums,n-1,0,dp1);
        
            return max(ans,ans1);
    }
};

//MINIMUM SUM PATH IN GRID USING O(M)SPACE
int minSumPath(vector<vector<int>> &mat) {
    // Write your code here.
	int n=mat.size();
	int m=mat[0].size();
	vector<int>dp(m+1,0);
	dp[0]=mat[0][0];
	for(int i=0;i<n;i++){
		vector<int>curr(m+1,0);
		for(int j=0;j<m;j++){
			if(i==0 and j==0){curr[j]=mat[i][j];continue;}
			int op1=1e9,op2=1e9;
			if(i>0)op1=mat[i][j]+dp[j];
			if(j>0)op2=mat[i][j]+curr[j-1];
			curr[j]=min(op1,op2);
		}
		dp=curr;
	}
	
	
	return dp[m-1];
}
	

//Subset Sum Equal To K
bool subsetSumToK(int n, int k, vector<int> &arr) {
    //isko apne se tabu mei krkr agge badho
    vector<bool>dp(k+1,0),curr(k+1,0);
    dp[0]=curr[0]=true;
  //bcz col k tho hai so now out of bound ni hogaa.
    if(arr[0]<=k)dp[arr[0]]=true;
     for(int i=1;i<n;i++){

        for(int j=1;j<=k;j++){
        bool op1=dp[j];
    bool op2=false;
    if(arr[i]<=j)
    op2=dp[j-arr[i]];
    curr[j]=op1 | op2;
        }
         dp=curr;
    }
   return dp[k];






















// C++ program using memoization
#include <bits/stdc++.h>
using namespace std;
int dp[100][100];

// Function for matrix chain multiplication
int matrixChainMemoised(int* p, int i, int j)
{
	if (i == j)
	{
		return 0;
	}
	if (dp[i][j] != -1)
	{
		return dp[i][j];
	}
	dp[i][j] = INT_MAX;
	for (int k = i; k < j; k++)
	{
		dp[i][j] = min(
			dp[i][j], matrixChainMemoised(p, i, k)
					+ matrixChainMemoised(p, k + 1, j)
					+ p[i - 1] * p[k] * p[j]);
	}
	return dp[i][j];
}
int MatrixChainOrder(int* p, int n)
{
	int i = 1, j = n - 1;
	return matrixChainMemoised(p, i, j);
}

// Driver Code
int main()
{
	int arr[] = { 1, 2, 3, 4 };
	int n = sizeof(arr) / sizeof(arr[0]);
	memset(dp, -1, sizeof dp);

	cout << "Minimum number of multiplications is "
		<< MatrixChainOrder(arr, n);
}


// C++ program to solve Gold Mine problem
#include<bits/stdc++.h>
using namespace std;

const int MAX = 100;

// Returns maximum amount of gold that can be collected
// when journey started from first column and moves
// allowed are right, right-up and right-down
int getMaxGold(int gold[][MAX], int m, int n)
{
	// Create a table for storing intermediate results
	// and initialize all cells to 0. The first row of
	// goldMineTable gives the maximum gold that the miner
	// can collect when starts that row
	int goldTable[m][n];
	memset(goldTable, 0, sizeof(goldTable));

	for (int col=n-2; col>=0; col--)
	{
		for (int row=0; row<m; row++)
		{
			// Gold collected on going to the cell on the right(->)
			int right =  goldTable[row][col+1];

			// Gold collected on going to the cell to right up (/)
			int right_up = (row==0 || col==n-1)? 0:
							goldTable[row-1][col+1];

			// Gold collected on going to the cell to right down (\)
			int right_down = (row==m-1 || col==n-1)? 0:
							goldTable[row+1][col+1];

			// Max gold collected from taking either of the
			// above 3 paths
			goldTable[row][col] = gold[row][col] +
							max(right, max(right_up, right_down));
													
		}
	}

	// The max amount of gold collected will be the max
	// value in first column of all rows
	int res = goldTable[0][0];
	for (int i=1; i<m; i++)
		res = max(res, goldTable[i][0]);
	return res;
}

// Driver Code
int main()
{
	int gold[MAX][MAX]= { {1, 3, 1, 5},
		{2, 2, 4, 1},
		{5, 0, 2, 3},
		{0, 6, 1, 2}
	};
	int m = 4, n = 4;
	cout << getMaxGold(gold, m, n);
	return 0;
}

Time Complexity: O(n3 )
Auxiliary Space: O(n2)
// C++ program using memoization
#include <bits/stdc++.h>
using namespace std;
int dp[100][100];

// Function for matrix chain multiplication
int matrixChainMemoised(int* p, int i, int j)
{
	if (i == j)
	{
		return 0;
	}
	if (dp[i][j] != -1)
	{
		return dp[i][j];
	}
	dp[i][j] = INT_MAX;
	for (int k = i; k < j; k++)
	{
		dp[i][j] = min(
			dp[i][j], matrixChainMemoised(p, i, k)
					+ matrixChainMemoised(p, k + 1, j)
					+ p[i - 1] * p[k] * p[j]);
	}
	return dp[i][j];
}
int MatrixChainOrder(int* p, int n)
{
	int i = 1, j = n - 1;
	return matrixChainMemoised(p, i, j);
}

// Driver Code
int main()
{
	int arr[] = { 1, 2, 3, 4 };
	int n = sizeof(arr) / sizeof(arr[0]);
	memset(dp, -1, sizeof dp);

	cout << "Minimum number of multiplications is "
		<< MatrixChainOrder(arr, n);
}

// A space optimized solution for
// assembly line scheduling
#include <bits/stdc++.h>
using namespace std;

int carAssembly(int a[][4],
				int t[][4],
				int *e, int *x)
{
	int first, second, i;

	// Time taken to leave first
	// station in line 1
	first = e[0] + a[0][0];
	
	// Time taken to leave first
	// station in line 2
	second = e[1] + a[1][0];

	// Fill tables T1[] and T2[] using the
	// above given recursive relations
	for(i = 1; i < 4; ++i)
	{
		int up = min(first + a[0][i],
					second + t[1][i] +
							a[0][i]);
		int down = min(second + a[1][i],
						first + t[0][i] +
								a[1][i]);
		first = up;
		second = down;
	}

	// Consider exit times and
	// return minimum
	return min(first + x[0],
			second + x[1]);
}

// Driver Code
int main()
{
	int a[][4] = { { 4, 5, 3, 2 },
				{ 2, 10, 1, 4 } };
	int t[][4] = { { 0, 7, 4, 5 },
				{ 0, 9, 2, 8 } };
	int e[] = { 10, 12 }, x[] = { 18, 7 };

	cout << carAssembly(a, t, e, x);

	return 0;
}

// A Dynamic Programming based
// C++ program to partition problem
#include <bits/stdc++.h>
using namespace std;

// Returns true if arr[] can be partitioned
// in two subsets of equal sum, otherwise false
bool findPartiion(int arr[], int n)
{
	int sum = 0;
	int i, j;

	// Calculate sum of all elements
	for (i = 0; i < n; i++)
		sum += arr[i];

	if (sum % 2 != 0)
		return false;

	bool part[sum / 2 + 1][n + 1];

	// initialize top row as true
	for (i = 0; i <= n; i++)
		part[0][i] = true;

	// initialize leftmost column,
	// except part[0][0], as 0
	for (i = 1; i <= sum / 2; i++)
		part[i][0] = false;

	// Fill the partition table in bottom up manner
	for (i = 1; i <= sum / 2; i++) {
		for (j = 1; j <= n; j++) {
			part[i][j] = part[i][j - 1];
			if (i >= arr[j - 1])
				part[i][j] = part[i][j]
							|| part[i - arr[j - 1]][j - 1];
		}
	}

	/* // uncomment this part to print table
	for (i = 0; i <= sum/2; i++)
	{
	for (j = 0; j <= n; j++)
		cout<<part[i][j];
	cout<<endl;
	} */

	return part[sum / 2][n];
}

// Driver Code
int main()
{
	int arr[] = { 3, 1, 1, 2, 2, 1 };
	int n = sizeof(arr) / sizeof(arr[0]);
	
	// Function call
	if (findPartiion(arr, n) == true)
		cout << "Can be divided into two subsets of equal "
				"sum";
	else
		cout << "Can not be divided into"
			<< " two subsets of equal sum";
	return 0;
}

// This code is contributed by rathbhupendra

//COUNT WAYS TO COLOR N POST WITH K COLOR WITH MAX 2 SAME ADJACENT
long long countWays(int n, int k)
{
if(n==1) return k;
long long lastSame=k,lastDiff=k*(k-1);
long long res = lastSame+lastDiff;
long long mod = 1000000000+7;
for(int i=3;i<=n;i++)
{
lastSame = lastDiff;
lastDiff = (res*(k-1))%mod;
res = (lastSame+lastDiff)%mod;
}
return res;
}

// Space optimized C++ implementation
// of LCS problem
#include<bits/stdc++.h>
using namespace std;

// Returns length of LCS
// for X[0..m-1], Y[0..n-1]
int lcs(string &X, string &Y)
{
	
	// Find lengths of two strings
	int m = X.length(), n = Y.length();

	int L[2][n + 1];

	// Binary index, used to
	// index current row and
	// previous row.
	bool bi;

	for (int i = 0; i <= m; i++)
	{
		
		// Compute current
		// binary index
		bi = i & 1;

		for (int j = 0; j <= n; j++)
		{
			if (i == 0 || j == 0)
				L[bi][j] = 0;

			else if (X[i-1] == Y[j-1])
				L[bi][j] = L[1 - bi][j - 1] + 1;

			else
				L[bi][j] = max(L[1 - bi][j],
							L[bi][j - 1]);
		}
	}

	// Last filled entry contains
	// length of LCS
	// for X[0..n-1] and Y[0..m-1]
	return L[bi][n];
}

// Driver code
int main()
{
	string X = "AGGTAB";
	string Y = "GXTXAYB";

	printf("Length of LCS is %d\n", lcs(X, Y));

	return 0;
}

// C++ program to find the longest repeated
// subsequence
#include <bits/stdc++.h>
using namespace std;

// This function mainly returns LCS(str, str)
// with a condition that same characters at
// same index are not considered.
string longestRepeatedSubSeq(string str)
{
	// THIS PART OF CODE IS SAME AS BELOW POST.
	// IT FILLS dp[][]
	// https://www.geeksforgeeks.org/longest-repeating-subsequence/
	// OR the code mentioned above.
	int n = str.length();
	int dp[n+1][n+1];
	for (int i=0; i<=n; i++)
		for (int j=0; j<=n; j++)
			dp[i][j] = 0;
	for (int i=1; i<=n; i++)
		for (int j=1; j<=n; j++)
			if (str[i-1] == str[j-1] && i != j)
				dp[i][j] = 1 + dp[i-1][j-1];
			else
				dp[i][j] = max(dp[i][j-1], dp[i-1][j]);


	// THIS PART OF CODE FINDS THE RESULT STRING USING DP[][]
	// Initialize result
	string res = "";

	// Traverse dp[][] from bottom right
	int i = n, j = n;
	while (i > 0 && j > 0)
	{
		// If this cell is same as diagonally
		// adjacent cell just above it, then
		// same characters are present at
		// str[i-1] and str[j-1]. Append any
		// of them to result.
		if (dp[i][j] == dp[i-1][j-1] + 1)
		{
		res = res + str[i-1];
		i--;
		j--;
		}

		// Otherwise we move to the side
		// that that gave us maximum result
		else if (dp[i][j] == dp[i-1][j])
			i--;
		else
			j--;
	}

	// Since we traverse dp[][] from bottom,
	// we get result in reverse order.
	reverse(res.begin(), res.end());

	return res;
}

// Driver Program
int main()
{
	string str = "AABEBCDD";
	cout << longestRepeatedSubSeq(str);
	return 0;
}

//LIS IN NLOGN TIME
int longests(int,inta[]){

int dp[n+1];
for(int i=1;i<=n;i++)dp[i]INT_MAX;
dp[0]=INT_MIN;
for(itn i=0;i<n;i++){
int idx=upper_bound(dp,dp+n+1,a[i])-dp ;
if(a[i]>dp[idx-1] and a[i]<dp[idx]){
dp[idx]=a[ i];
}
}
int ma=0;
for(int i=n;i>=0;i--){
if(dp[i]!=INT_MAX){
ma=i;
break;
}
} return ma;
}

// C++ implementation of the approach
#include <bits/stdc++.h>
using namespace std;
#define ll long long int
#define N 4

// Function to return the sum of the sub-matrix
int getSum(int r1, int r2, int c1, int c2,
		int dp[N + 1][N + 1])
{
	return dp[r2][c2] - dp[r2][c1] - dp[r1][c2]
		+ dp[r1][c1];
}

// Function that returns true if it is possible
// to find the sub-matrix with required sum
bool sumFound(int K, int S, int grid[N][N])
{

	// 2-D array to store the sum of
	// all the sub-matrices
	int dp[N + 1][N + 1];

	// Filling of dp[][] array
	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++)
			dp[i + 1][j + 1] = dp[i + 1][j] + dp[i][j + 1]
							- dp[i][j] + grid[i][j];

	// Checking for each possible sub-matrix of size k X k
	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++) {
			int sum = getSum(i, i + K, j, j + K, dp);

			if (sum == S)
				return true;
		}

	// Sub-matrix with the given sum not found
	return false;
}

// Driver code
int main()
{
	int grid[N][N] = { { 1, 2, 3, 4 },
					{ 5, 6, 7, 8 },
					{ 9, 10, 11, 12 },
					{ 13, 14, 15, 16 } };
	int K = 2;
	int S = 14;

	// Function call
	if (sumFound(K, S, grid))
		cout << "Yes" << endl;
	else
		cout << "No" << endl;
}

// C++ program for the above approach
#include<bits/stdc++.h>
using namespace std;

// To sort the array and return the answer
int removals(int arr[], int n, int k)
{

// sort the array
sort(arr, arr + n);
int dp[n];

// fill all stated with -1
// when only one element
for(int i = 0; i < n; i++)
	dp[i] = -1;

// as dp[0] = 0 (base case) so min
// no of elements to be removed are
// n-1 elements
int ans = n - 1;
dp[0] = 0;
for (int i = 1; i < n; i++)
{
	dp[i] = i;
	int j = dp[i - 1];
	while (j != i && arr[i] - arr[j] > k)
	{
	j++;
	}
	dp[i] = min(dp[i], j);
	ans = min(ans, (n - (i - j + 1)));
}
return ans;
}

// Driver code
int main()
{
int a[] = { 1, 3, 4, 9, 10, 11, 12, 17, 20 };
int n = sizeof(a) / sizeof(a[0]);
int k = 4;
cout<<removals(a, n, k);
return 0;
}

// This code is contributed by Balu Nagar

