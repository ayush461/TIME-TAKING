
           //syntax of erase function in string 
           string s="asfwffw";
	 //q is a stack of pairs
         //s.erase(position,no of characters to be deleted)
        s.erase(q.top().second,1);

Q1) TERNARY SEARCH,divides array in 3 parts,for sorted array

    int ternarySearch(int arr[], int N, int K) 
    { 
    
        int l = 0, r = N-1;
        while (l<=r) {
     
            // Find the mid1 and mid2
            int mid1 = l + (r - l) / 3;
            int mid2 = r - (r - l) / 3;
     
            // Check if key is present at any mid
            if (arr[mid1] == K) {
                return 1;
            }
            if (arr[mid2] == K) {
                return 1;
            }
     
            // Since key is not present at mid,
            // check in which region it is present
            // then repeat the Search operation
            // in that region
     
            if (K < arr[mid1]) {
     
                // The key lies in between l and mid1
                r = mid1 - 1;
            }
            else if (K > arr[mid2]) {
     
                // The key lies in between mid2 and r
                l = mid2 + 1;
            }
            else {
     
                // The key lies in between mid1 and mid2
                l = mid1 + 1;
                r = mid2 - 1;
            }
        }
     
        // Key not found
        return -1;
    } 

// C++ program for the above approach
#include <bits/stdc++.h>
using namespace std;

// Function for finding the first
// missing positive number
int firstMissingPositive(int arr[], int n)
{
	
	// Loop to traverse the whole array
	for (int i = 0; i < n; i++) {
		
		// Loop to check boundary
		// condition and for swapping
		while (arr[i] >= 1 && arr[i] <= n
			&& arr[i] != arr[arr[i] - 1]) {
			swap(arr[i], arr[arr[i] - 1]);
		}
	}
	
	// Checking any element which
	// is not equal to i+1
	for (int i = 0; i < n; i++) {
		if (arr[i] != i + 1) {
			return i + 1;
		}
	}
	
	// Nothing is present return last index
	return n + 1;
}

// Driver code
int main()
{
	int arr[] = { 2, 3, -7, 6, 8, 1, -10, 15 };
	int n = sizeof(arr) / sizeof(arr[0]);

	int ans = firstMissingPositive(arr, n);

	cout << ans;

	return 0;
}


Kth Smallest Product of Two Sorted Arrays Log(n)log(m)
class Solution {
    public long kthSmallestProduct(int[] nums1, int[] nums2, long k) {
        long lb = (long) -1e10, rb = (long) 1e10;
        
        while(lb <= rb){
            long dotProduct = (lb + rb) / 2;
            if(countNoOfElements(nums1,nums2,dotProduct) < k)
                lb = dotProduct + 1;
            else 
                rb = dotProduct - 1;
        }
        
        return rb;
    }
    
    private long countNoOfElements(int[] nums1, int[] nums2, long dotProduct){
        long count = 0;
        for(int ele : nums1){
            if(ele >= 0){
                int li = 0, ri = nums2.length;
                while(li < ri){
                    int mid = (li + ri) / 2;
                    if((long) ele * nums2[mid] < dotProduct) li = mid + 1;
                    else ri = mid;
                }
                
                count += li;
            }else{
                int li = 0, ri = nums2.length;
                while(li < ri){
                    int mid = (li + ri) / 2;
                    if((long) ele * nums2[mid] >= dotProduct) li = mid + 1;
                    else ri = mid ;
                }
                
                count += nums2.length - li;
            }
        }
        
        return count;
    }
}



// C++ program for first +ve missing no in array inO(N)
//arr has only +ve elements.
vector<int>repeatedNumber(const vector<int> &A) {
	long long int len = A.size();
	long long int Sum_N = (len * (len+1) ) /2, Sum_NSq = (len * (len +1) *(2*len +1) )/6;
	long long int missingNumber=0, repeating=0;
	
	for(int i=0;i<A.size(); i++){
	Sum_N -= (long long int)A[i];
	Sum_NSq -= (long long int)A[i]*(long long int)A[i];
	}
	
	missingNumber = (Sum_N + Sum_NSq/Sum_N)/2;
	repeating= missingNumber - Sum_N;
	vector <int> ans;
	ans.push_back(repeating);
	ans.push_back(missingNumber);
	return ans;
	
}


//2 pointer approach soritng is not required
//ek pointer -1 se aur dusra pointer 0 se suru hoga bhaut jagah use hota aisa concept
//maxm books can read within free time and in given order ie:no sorting is allowed
int ans=INT_MIN;  int sum=0; int ft=t; int j=-1;
for(int i=0;i<n;i++){
    
    if(sum+arr[i]<=ft)
    sum+=arr[i];
else{
    sum+=arr[i];
    while(sum>ft){
        j++;
        sum-=arr[j];
        
    }
}
    ans=max(ans,i-j);
}
 
if(ans!=INT_MIN)
cout<<ans<<endl;
else
cout<<0<<endl;
    return 0;
}

//for rmsb of a no is rmsb=no & -no(this is ~no then ~no+1)

// Function that find the unique element,and others repeating k times
// in the array arr[]
int findUniqueElements(int arr[], int N,
					int K)
{
	// Store all unique element in set
	unordered_set<int> s(arr, arr + N);

	// Sum of all element of the array
	int arr_sum = accumulate(arr, arr + N, 0);

	// Sum of element in the set
	int set_sum = accumulate(s.begin(),
							s.end(),
							0);

	// Print the unique element using formula
	cout << (K * set_sum - arr_sum) / (K - 1);
}
//using bit method..
// CPP program for the above approach
#include <bits/stdc++.h>
using namespace std;

// Function to find single occurrence element
int findunique(vector<int>& a, int k)
{
	int res = 0;

	for (int i = 0; i < 32; i++) {
		int p = 0;

		for (int j = 0; j < a.size(); j++) {
			// By shifting 1 to left ith
			// time and taking and with 1
			// will give us that ith
			// bit of a[j] is 1 or 0
			p += (abs(a[j]) & (
				1 << i)) != 0 ? 1 : 0;
		}

		// Taking modulo of p with k
		p %= k;

		// Generate result
		res += pow(2, i) * p;
	}

	int c = 0;

	// Loop for negative numbers
	for (auto x : a)

		if (x == res) {
			c = 1;
			break;
		}

	// Check if the calculated value res
	// is present in array, then mark c=1
	// and if c = 1 return res
	// else res must be -ve
	return c == 1 ? res : -res;
}





// find pair whose diff==n IN O(N) time  sorting+2pointer(dono pointer aage se suru hoga why???) se O(NLOGN) LGEGA
int findPairs(vector<int>& nums, int k) {
        
        sort(nums.begin(), nums.end());
        int ans = 0, i = 0, j = 1;
        for(i, j; i<nums.size() && j<nums.size(); ) {
            if(i==j || nums[j]-nums[i]<k) j++;
            else {
                if(nums[j]-nums[i]==k) {
                    ans++;
                    j++;
                    while(j<nums.size() && nums[j]==nums[j-1]) j++; // remove redundant
                }
                i++;
                while(i<j && nums[i]==nums[i-1]) i++; // remove redundant
            }
        }
        return ans;
    }

4 SUM IN ARRAY,O(N^3)
vector<vector<int> > fourSum(vector<int> &num, int target) {
    
        vector<vector<int> > res;
    
        if (num.empty())
            return res;
    
        std::sort(num.begin(),num.end());
    
        for (int i = 0; i < num.size(); i++) {
        
            int target_3 = target - num[i];
        
            for (int j = i + 1; j < num.size(); j++) {
            
                int target_2 = target_3 - num[j];
            
                int front = j + 1;
                int back = num.size() - 1;
            
                while(front < back) {
                
                    int two_sum = num[front] + num[back];
                
                    if (two_sum < target_2) front++;
                
                    else if (two_sum > target_2) back--;
                
                    else {
                    
                        vector<int> quadruplet(4, 0);
                        quadruplet[0] = num[i];
                        quadruplet[1] = num[j];
                        quadruplet[2] = num[front];
                        quadruplet[3] = num[back];
                        res.push_back(quadruplet);
                    
                        // Processing the duplicates of number 3
                        while (front < back && num[front] == quadruplet[2]) ++front;
                    
                        // Processing the duplicates of number 4
                        while (front < back && num[back] == quadruplet[3]) --back;
                
                    }
                }
                
                // Processing the duplicates of number 2
                while(j + 1 < num.size() && num[j + 1] == num[j]) ++j;
            }
        
            // Processing the duplicates of number 1
            while (i + 1 < num.size() && num[i + 1] == num[i]) ++i;
        
        }
    
        return res;
    
    }


vector<int> majorityElement(vector<int>& nums) {
        int c=0,c1=0;
        int ind=0,ind1=0;
        for(int i=0;i<nums.size();i++){
            
            if(nums[i]==ind)
                c++;
            else if(nums[i]==ind1)
                c1++;
            
          else  if(c==0){
                c=1;
               ind=nums[i];
            }
            else if(c1==0){
                c1=1;
                ind1=nums[i];
            }
            else{
                c--,c1--;
            }
        }
        vector<int>ans;
        c=0,c1=0;
        for(int i=0;i<nums.size();i++){
            
            if(nums[i]==ind)
                c++;
            else if(nums[i]==ind1)
                c1++;
        }
        if(c>nums.size()/3)
            ans.push_back(ind);
        if(c1>nums.size()/3)
            ans.push_back(ind1);
        
        return ans;
    }








DO IT IN O(N^2) using map
#include <stdio.h>
//we have used here 1 based indexing
int josephus(int n, int k)
{
	if (n == 1)
		return 1;//return 0 for 0 based indexing
	else
		int x=josephus(n - 1, k);
		int y=(x+k-1)%n+1; //(x+k)%n;for 0 based indexing
		return y;
}

// Driver Program to test above function
int main()
{
	int n = 14;
	int k = 2;
	printf("The chosen place is %d", josephus(n, k));
	return 0;
}

// C++ program to print all elements that
// appear more than once.
#include <iostream>
using namespace std;

// function to find repeating elements
void printRepeating(int arr[], int n)
{
	// First check all the values that are
	// present in an array then go to that
	// values as indexes and increment by
	// the size of array
	for (int i = 0; i < n; i++)
	{
		int index = arr[i] % n;
		arr[index] += n;
	}

	// Now check which value exists more
	// than once by dividing with the size
	// of array
	for (int i = 0; i < n; i++)
	{
		if ((arr[i] / n) >= 2)
			cout << i << " ";
	}
}

// Driver code
int main()
{
	int arr[] = { 1, 6, 3, 1, 3, 6, 6 };
	int arr_size = sizeof(arr) / sizeof(arr[0]);

	cout << "The repeating elements are: \n";

	// Function call
	printRepeating(arr, arr_size);
	return 0;
}




// A hashing based CPP program
// to find if there are
// four elements with given sum.
#include <bits/stdc++.h>
using namespace std;

// The function finds four
// elements with given sum X
void findFourElements(int arr[], int n, int X)
{
	// Store sums of all pairs
	// in a hash table
	unordered_map<int, pair<int, int> > mp;
	for (int i = 0; i < n - 1; i++)
		for (int j = i + 1; j < n; j++)
			mp[arr[i] + arr[j]] = { i, j };

	// Traverse through all pairs and search
	// for X - (current pair sum).
	for (int i = 0; i < n - 1; i++) {
		for (int j = i + 1; j < n; j++) {
			int sum = arr[i] + arr[j];

			// If X - sum is present in hash table,
			if (mp.find(X - sum) != mp.end()) {

				// Making sure that all elements are
				// distinct array elements and an element
				// is not considered more than once.
				pair<int, int> p = mp[X - sum];
				if (p.first != i && p.first != j
					&& p.second != i && p.second != j) {
					cout << arr[i] << ", " << arr[j] << ", "
						<< arr[p.first] << ", "
						<< arr[p.second];
					return;
				}
			}
		}
	}
}


Given an array, the solution is to find the maximum sum subsequence where no two selected elements are adjacent. 
So the approach to the problem is a recursive solution.
So there are two cases. 
 

If an element is selected then the next element cannot be selected.
if an element is not selected then the next element can be selected.
So the recursive solution can easily be devised. 
The sub-problems can be stored thus reducing the complexity and converting the
 recursive solution to a Dynamic programming problem.

// Function to calculate the maximum sum in a given array
// with no adjacent elements considered
// `i` ——> index of the current element
// `prev` ——> index of the previous element included in the sum

   	int dp[1000007];
	int cal(int *arr,int n,int i){
	     
	    if(i>=n)
	       return 0; 
	     
	     if(i==n-1)
	     return arr[n-1];
        	  
        	  if(dp[i]!=0)
        	  return dp[i];
        	  
	   int a=arr[i]+cal(arr,n,i+2);
	   int b=cal(arr,n,i+1);
	   
	    return dp[i]=max(a,b);
	}
	int findMaxSum(int *arr, int n) {
	    // code here
	    memset(dp,0,sizeof(dp));
	     return cal(arr,n,0);
	    
	}
}
 
int main()
{
    vector<int> nums = { 1, 2, 9, 4, 5, 0, 4, 11, 6 };
    int n = nums.size();
 
    cout << "The maximum sum is " << findMaxSumSubsequence(nums, 0, n, INT_MIN);
 
    return 0;
}



lookup


// C++ program to print all subarrays IN O(N^2)
// in the array which has sum 0
#include <bits/stdc++.h>
using namespace std;

// Function to print all subarrays in the array which
// has sum 0
vector< pair<int, int> > findSubArrays(int arr[], int n)
{
	// create an empty map
	unordered_map<int, vector<int> > map;

	// create an empty vector of pairs to store
	// subarray starting and ending index
	vector <pair<int, int>> out;

	// Maintains sum of elements so far
	int sum = 0;

	for (int i = 0; i < n; i++)
	{
		// add current element to sum
		sum += arr[i];

		// if sum is 0, we found a subarray starting
		// from index 0 and ending at index i
		if (sum == 0)
			out.push_back(make_pair(0, i));

		// If sum already exists in the map there exists
		// at-least one subarray ending at index i with
		// 0 sum
		if (map.find(sum) != map.end())
		{
			// map[sum] stores starting index of all subarrays
			vector<int> vc = map[sum];
			for (auto it = vc.begin(); it != vc.end(); it++)
				out.push_back(make_pair(*it + 1, i));
		}

		// Important - no else
		map[sum].push_back(i);
	}

	// return output vector
	return out;
}

// Utility function to print all subarrays with sum 0
void print(vector<pair<int, int>> out)
{
	for (auto it = out.begin(); it != out.end(); it++)
		cout << "Subarray found from Index " <<
			it->first << " to " << it->second << endl;
}

// Driver code
int main()
{
	int arr[] = {6, 3, -1, -3, 4, -2, 2, 4, 6, -12, -7};
	int n = sizeof(arr)/sizeof(arr[0]);

	vector<pair<int, int> > out = findSubArrays(arr, n);

	// if we didn’t find any subarray with 0 sum,
	// then subarray doesn’t exists
	if (out.size() == 0)
		cout << "No subarray exists";
	else
		print(out);

	return 0;
}

// Given an array arr[] of n integers, construct a Product Array prod[] (of same size)
 such that prod[i] is equal to the product of all the elements of arr[] except arr[i].
 Solve it without division operator in O(n) time.


#include <bits/stdc++.h>
using namespace std;

/* Function to print product array
for a given array arr[] of size n */
void productArray(int arr[], int n)
{

	// Base case
	if (n == 1) {
		cout << 0;
		return;
	}

	int i, temp = 1;

	/* Allocate memory for the product array */
	int* prod = new int[(sizeof(int) * n)];

	/* Initialize the product array as 1 */
	memset(prod, 1, n);

	/* In this loop, temp variable contains product of
	elements on left side excluding arr[i] */
	for (i = 0; i < n; i++) {
		prod[i] = temp;
		temp *= arr[i];
	}

	/* Initialize temp to 1
	for product on right side */
	temp = 1;

	/* In this loop, temp variable contains product of
	elements on right side excluding arr[i] */
	for (i = n - 1; i >= 0; i--) {
		prod[i] *= temp;
		temp *= arr[i];
	}

	/* print the constructed prod array */
	for (i = 0; i < n; i++)
		cout << prod[i] << " ";

	return;
}

// Driver Code
int main()
{
	int arr[] = { 10, 3, 5, 6, 2 };
	int n = sizeof(arr) / sizeof(arr[0]);
	cout << "The product array is: \n";
	productArray(arr, n);
}

// Efficient C++ program to compute sum of
// subarray elements IN O(N)
//OBSERVAATION :arr[i] in first posn will be in (n-i)times,from arr[i]to last.
//arr[i] not in first posn will be in (n-i)*i times,all elemnts before it
//(n-i)+n(-i)*i=(i+1) * (n-i);
//function compute sum all sub-array
long int SubArraySum( int arr[] , int n )
{
	long int result = 0;

	// computing sum of subarray using formula
	for (int i=0; i<n; i++)
		result += (arr[i] * (i+1) * (n-i));

	// return all subarray sum
	return result ;
}

// driver program to test above function
int main()
{
	int arr[] = {1, 2, 3} ;
	int n = sizeof(arr)/sizeof(arr[0]);
	cout << "Sum of SubArray : "
		<< SubArraySum(arr, n) << endl;
	return 0;
}
/* C++ code to generate all possible subsequences.
BITMASKING AUR RECURSION SE BHI KR LENA
	Time Complexity O(n * 2^n) */
#include<bits/stdc++.h>
using namespace std;

void printSubsequences(int arr[], int n)
{
	/* Number of subsequences is (2**n -1)*/
	unsigned int opsize = pow(2, n);

	/* Run from counter 000..1 to 111..1*/
	for (int counter = 1; counter < opsize; counter++)
	{
		for (int j = 0; j < n; j++)
		{
			/* Check if jth bit in the counter is set
				If set then print jth element from arr[] */
			if (& (1<counter <j))
				cout << arr[j] << " ";
		}
		cout << endl;
	}
}

//find the duplicate in oN time and o1 space,(no must be from 1 to n+1)

if (nums.size() > 1)
	{
		int slow = nums[0];
		int fast = nums[0];
		do
		{
			slow = nums[slow];
			fast = nums[nums[fast]];
		}while (slow != fast);

		fast =nums[0];
		while (fast != slow)
		{
			fast = nums[fast];
			slow = nums[slow];
		}
		return slow;
	}
	return -1;
}

class Solution {
public:
    vector<int> findClosestElements(vector<int>& arr, int k, int x) {
        
        //i just need the st index.
        
        vector<int>ans;
        int l=0;
        int h=arr.size()-k;
        
        while(l<h){
            
           int mid=l+(h-l)/2;
            
            if(x-arr[mid]>arr[mid+k]-x)
                l=mid+1;
            else
                h=mid;
        }
       for(int i=l;i<l+k;i++){
           ans.push_back(arr[i]);
       }
        return ans;
    }


