

//same thing for sort and reverse

//index diya hai toh row ke hisab se and woh bhi sirf first row
//isme sara row ko reverse krne ke liye use for loop
for(int i=0;i<matrix.si'ze();i++)
  reverse(matrix[i].begin(),matrix[i].end());



//agr kuch index ni hai toh first col ke hisab se kaam ho rha
//isse sara col reverse hogya
  reverse(matrix.begin(),matrix.end());


// Appends 10 occurrences of '$'
    // to str
    str.append(10, '$');

int a = b is setting a's VALUE to b's VALUE
int* a = &b is setting a's VALUE to the ADDRESS of b
int& a = b is setting a's ADDRESS to b's ADDRESS (a is a reference to b)


int maximum69Number (int num) {
        string s_num = to_string(num);//int to string
        for (auto &c : s_num) {
            if (c == '6') {
                c = '9';
                break;
            }
        }
        return stoi(s_num);//string to int



//IN BS FIND THE LOW AND HIGH RANGE BY TAKING BEST AND WROST CASES, AND
//THEN OPERATE IN THE RANGE

  //AGRESSIVE COWS
  #include <bits/stdc++.h>
    using namespace std;
    bool isPossible(int a[], int n, int cows, int minDist) {
        int cntCows = 1; 
        int lastPlacedCow = a[0];
        for(int i = 1;i<n;i++) {
            if(a[i] - lastPlacedCow >= minDist) {
                cntCows++;
                lastPlacedCow = a[i]; 
            }
        }
        if(cntCows >= cows) return true;
        return false; 
    }\
    int main() {
    	int t;
    	cin >> t;
    	while(t--) {
    	    int n, cows;
    	    cin >> n >> cows;
    	    int a[n];
    	    for(int i = 0;i<n;i++) cin >> a[i]; 
    	    sort(a,a+n); 
    	    
    	    int low = 1, high = a[n-1] - a[0]; 
    	    
    	    while(low <= high) {
    	        int mid = (low + high) >> 1; 
    	        
    	        if(isPossible(a,n,cows,mid)) {
    	            low = mid + 1;
    	        }
    	        else {
    	            high = mid - 1; 
    	        }
    	    }
    	    cout << high << endl; 
    	}
    	return 0;
    } 

//find k closest elements to x in a given  sorted array
 vector<int> findClosestElements(vector<int>& arr, int k, int x) {
        vector<int>ans;
        int n=arr.size();
        //range dekh ke lena hai
        int l=0;
        int r=n-k;
    //we are finding the stating point closest to x
        while(l<r){
            int mid= l+(r-l)/2;
            //yaha pr gap check kro jitna bada gap utna dur hoga x se
            if(x-arr[mid]>arr[mid+k]-x)
                l=mid+1;
            else
                r=mid;
        }
        //here l and r will same 
        
        //ab yaha se k elements daal do
       for(int i=r;i<r+k;i++){
           ans.push_back(arr[i]);
       }
        return ans;
    }

//Allocate Minimum Number of Pages,SAME AS PAINTER-PARTITION PROBLEM
int isPossible(vector<int> &A, int pages, int students) {
    int cnt = 0;
    int sumAllocated = 0; 
    for(int i = 0;i<A.size();i++) {
        if(sumAllocated + A[i] > pages) {
            cnt++; 
            sumAllocated = A[i];
            if(sumAllocated > pages) return false; 
        }
        else {
            sumAllocated += A[i];
        }
    }
    if(cnt < students) return true; 
    return false; 
}
int Solution::books(vector<int> &A, int B) {
    if(B > A.size()) return -1; 
    int low = A[0]; 
    int high = 0;
    for(int i = 0;i<A.size();i++) {
        high = high + A[i]; 
        low = min(low, A[i]); 
    }
    int res = -1; 
    while(low <= high) {
        int mid = (low + high) >> 1; 
        //cout << low << " " << high << " " << mid << endl; 
        if(isPossible(A, mid, B)) {
            res = mid; 
            high = mid - 1; 
        }
        else {
            low = mid + 1; 
        }
    }
    // return res -> this is also correct
    return low; 
}
//WOOD-CUTTING MADE EASY.
public class Solution {
    public static int solve(int[] A, int B) {
       
      int h = 0;
      int max = 0;
      int min =0;
      int ans = 0;
      
      for(int i=0;i<A.length;i++){
          max = Math.max(max,A[i]);
      }
      
     while(min<=max){
          int mid = min+(max-min)/2;
          long wood = 0;
          for(int j=0;j<A.length;j++){
              if(A[j]-mid>0){
                  wood = wood+A[j]-mid;
              }
          }
          if(wood>=(long)B){
              min = mid+1;
              //0 5 10 15
              ans = Math.max(ans,mid);//15
          }else{
              max = mid-1;
          }
      }
      return ans;
    }
}

// C++ program to find the smallest
// window containing all characters
// of a pattern.

  //of all the characters of string p.
    string smallestWindow (string s, string p)
    {
        unordered_map<char,int>mpp;
        for(int i=0;i<p.size();i++){
            mpp[p[i]]++;
        }
        int count=mpp.size(); // count of distinct char
        int i=0,j=0,n=s.size();
        int start;
        int len=INT_MAX;
        while(j<n){
            if(mpp.find(s[j])!=mpp.end()){
                mpp[s[j]]--;
                if(mpp[s[j]]==0)
                count--;
            }
  
                while(count==0){
                    if(len>j-i+1){
                        len=j-i+1;
                        start=i;
                    }
                    if(mpp.find(s[i])!=mpp.end()){
                        mpp[s[i]]++;
                        if(mpp[s[i]]==1){
                            count++;
                        }
                        
                    }
                    i++;
                }
            
            j++;
        }
        return len==s.size()? "-1":s.substr(start,len);
    
    }


// CPP program for the above approach
#include <bits/stdc++.h>
using namespace std;

// Function to find single occurrence element
int findunique(vector<int>& a, int k)
{
	int res = 0;

	for (int i = 0; i < 32; i++) {
		int p = 0;

		for (int j = 0; j < a.size(); j++) {
			// By shifting 1 to left ith
			// time and taking and with 1
			// will give us that ith
			// bit of a[j] is 1 or 0
			p += (abs(a[j]) & (
				1 << i)) != 0 ? 1 : 0;
		}

		// Taking modulo of p with k
		p %= k;

		// Generate result
		res += pow(2, i) * p;
	}

	int c = 0;

	// Loop for negative numbers
	for (auto x : a)

		if (x == res) {
			c = 1;
			break;
		}

	// Check if the calculated value res
	// is present in array, then mark c=1
	// and if c = 1 return res
	// else res must be -ve
	return c == 1 ? res : -res;
}

// Driver code
int main()
{

	vector<int> a = { 12, 12, 2, 2, 3 };
	int k = 2;

	// Function call
	cout << findunique(a, k) << "\n";
}
// This article is contributed by ajaykr00kj


// C++ program for Kth element in spiral in O(C)C=NO OF CIRCU RING WRTO K.
// form of matrix

/* function for Kth element */
int findK(int A[MAX][MAX], int n, int m, int k)
{
	if (n < 1 || m < 1)
		return -1;

	/*....If element is in outermost ring ....*/
	/* Element is in first row */
	if (k <= m)
		return A[0][k - 1];

	/* Element is in last column */
	if (k <= (m + n - 1))
		return A[(k - m)][m - 1];

	/* Element is in last row */
	if (k <= (m + n - 1 + m - 1))
		return A[n - 1][m - 1 - (k - (m + n - 1))];

	/* Element is in first column */
	if (k <= (m + n - 1 + m - 1 + n - 2))
		return A[n - 1 - (k - (m + n - 1 + m - 1))][0];

	/*....If element is NOT in outermost ring ....*/
	/* Recursion for sub-matrix. &A[1][1] is
	address to next inside sub matrix.*/
	return findK((int(*)[MAX])(&(A[1][1])), n - 2,
				m - 2, k - (2 * n + 2 * m - 4));
}

// C++ program for Kth smallest element in the matrix. in O(N*Log(N))
// form of matrix

class Solution {
public:
    int lessEqual(vector<vector<int>>& matrix, int &target,int &N) {
    int cnt = 0, i = N - 1, j = 0;
    while (i >= 0 && j < N) {
      if (matrix[i][j] > target)
        i--;
      else {
        cnt = cnt + i + 1;
        j++;
      }
    }
    return cnt;
  }
int kthSmallest(vector<vector<int>>& matrix, int k)
{
 int n=matrix.size(),lo = matrix[0][0], hi = matrix[n - 1][n - 1];
    // lo < hi , not lo <= hit
    while (lo < hi) {
      int mid = lo + (hi - lo) / 2;
      int count = lessEqual(matrix, mid,n);
      if (count <k)
        lo = mid+1;
        //
      else
        hi = mid-1;
    }
    return lo;

}
};

//find median of matrix inplace in (32*logc*r)
 class Solution{   
public:

        int  ch(int t,vector<vector<int>> &mat,int c){
            
            int cnt=0;
            for(int i=0;i<mat.size();i++){
            
              int l=0;
              int h=c-1;
              while(l<=h){
            
               int mid=l+(h-l)/2;
               if(mat[i][mid]>t)
                h=mid-1;
                else
                l=mid+1;
              }
            cnt+=l;
        }
        return cnt;
        }
    int median(vector<vector<int>> &mat, int r, int c){
            int l=1;
            int h=20001;
            int k=(r*c)/2;
            while(l<=h){
                
                int mid=l+(h-l)/2;
               // int cnt;
             int  cnt=ch(mid,mat,c);//'//==k)
                //   return mid;
                 if(cnt<=k)
                l=mid+1;
                else
                h=mid-1;
            }
            return l;
    }



//// Program to find k-th element from two sorted arrays tc:O((log n + log m);
#include <iostream>
using namespace std;

int kthElement(int arr1[], int arr2[], int n, int m, int k)
    {
        if(n>m){
           kthElement( arr2, arr1, m, n, k);
        }
        
        int l=max(0,k-m);
        int h=min(n,k);
        
        while(l<h){
          int cut1=l+(h-l)/2;
          int cut2=k-cut1;
          
          int l1=cut1==0?INT_MIN:arr1[cut1-1];
          int l2=cut2==0?INT_MIN:arr2[cut2-1];
          
           int r1=cut1==n?INT_MAX:arr1[cut1];
          int r2=cut2==m?INT_MAX:arr2[cut2];
          
          if(l1<=r2 and l2<=r1){
              return max(l1,l2);
          }
            
            else if(l1>r2)
                   h=cut1-1;
            else
            l=cut1+1;
            
        }
        return 1;
    }



// C++ code for First negative integer
// in every window of size k
#include <iostream>
using namespace std;

vector<long long> printFirstNegativeInteger(long long int A[],
                                             long long int n, long long int k) {
       
  
      vector<long long>v;
      queue<long long>q;
      int i=0,j=0;
      while(j<n){
          
          if(A[j]<0)q.push(A[j]);
          //if window size is small
       if(j-i+1<k){
           j++;
       }   
          //same size as k
   else   if(j-i+1==k){
              
              if(!q.empty())
              v.push_back(q.front());
              else
              v.push_back(0);
              
              //q ka front and prev ele same ni hona chaiye
              if(A[i]==q.front())q.pop();
              
              i++;j++;
              
          }
       
      }
       
       return v;
       }


// A Dequeue (Double ended queue) based
// method for printing maximum element of
// all subarrays of size k

// CPP program for the above approach
#include <bits/stdc++.h>
using namespace std;

 vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        deque<int> dq;
        vector<int> ans;
        for (int i=0; i<nums.size(); i++) {
            if (!dq.empty() && dq.front() == i-k) dq.pop_front();
            
            while (!dq.empty() && nums[dq.back()] < nums[i])
                dq.pop_back();
            
            dq.push_back(i);
            if (i>=k-1) ans.push_back(nums[dq.front()]);
        }
        return ans;
    }


Suppose we have a number A and we want to  
convert it to a number B and there is also a  
constraint that we can recover number A any  
time without using other variable.To achieve  
this we chose a number N which is greater  
than both numbers and add B*N in A.
so A --> A+B*N

To get number B out of (A+B*N)  
we divide (A+B*N) by N (A+B*N)/N = B.

To get number A out of (A+B*N)  
we take modulo with N (A+B*N)%N = A.

-> In short by taking modulo  
we get old number back and taking divide  
we new number.
mergeSort():

Calculate mid two split the array into two halves(left sub-array and right sub-array)
Recursively call merge sort on left sub-array and right sub-array to sort them
Call merge function to merge left sub-array and right sub-array
merge():

// C++ program in-place Merge Sort INPLACE
#include <bits/stdc++.h>
using namespace std;
 
// Merges two subarrays of arr[].
// First subarray is arr[l..m]
// Second subarray is arr[m+1..r]
// Inplace Implementation
void mergeInPlace(int a[], int l, int m, int r)//BASIC MEI O(n^2){SHIFTNG USE HUA THA} LGA ISME O(NLOGN) BS.
{
    // increment the maximum_element by one to avoid
    // collision of 0 and maximum element of array in modulo
    // operation
    int mx = max(a[m], a[r]) + 1;
 
    int i = l, j = m + 1, k = l;
    while (i <= m && j <= r && k <= r) {
 
        // recover back original element to compare
        int e1 = a[i] % mx;
        int e2 = a[j] % mx;
        if (e1 <= e2) {
            a[k] += (e1 * mx);
            i++;
            k++;
        }
        else {
            a[k] += (e2 * mx);
            j++;
            k++;
        }
    }
 
    // process those elements which are left in the array
    while (i <= m) {
        int el = a[i] % mx;
        a[k] += (el * mx);
        i++;
        k++;
    }
 
    while (j <= r) {
        int el = a[j] % mx;
        a[k] += (el * mx);
        j++;
        k++;
    }
 
    // finally update elements by dividing with maximum
    // element
    for (int i = l; i <= r; i++)
        a[i] /= mx;
}
 
/* l is for left index and r is right index of the
   sub-array of arr to be sorted */
void mergeSort(int arr[], int l, int r)
{
    if (l < r) {
 
        // Same as (l + r) / 2, but avoids overflow
        // for large l and r
        int m = l + (r - l) / 2;
 
        // Sort first and second halves
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
        mergeInPlace(arr, l, m, r);
    }
}
// Iterative C++ program to print sums of all
// possible subsets.
#include <bits/stdc++.h>
using namespace std;

// Prints sums of all subsets of array
void subsetSums(int arr[], int n)
{
	// There are totoal 2^n subsets
	long long total = 1 << n;

	// Consider all numbers from 0 to 2^n - 1
	for (long long i = 0; i < total; i++) {
		long long sum = 0;

		// Consider binary representation of
		// current i to decide which elements
		// to pick.
		for (int j = 0; j < n; j++)
			if (i & (1 << j))
				sum += arr[j];

		// Print sum of picked elements.
		cout << sum << " ";
	}
}

// C++ implementation of above approach
//warna direct print kr do for not changing

void rotate90Clockwise(int arr[N][N])
{
    // printing the matrix on the basis of
    // observations made on indices.
    for (int j = 0; j < N; j++)
    {
        for (int i = N - 1; i >= 0; i--)
            cout << arr[i][j] << " ";
        cout << '\n';
    }
This changes the input matrix
// Function to rotate the matrix 90 degree clockwise
An N x N matrix will have floor(N/2) square cycles. 
For example, a 3 X 3 matrix will have 1 cycle. The cycle is formed by its 1st row, last column,
 last row, and 1st column.For each square cycle, we swap the elements involved with the corresponding cell in the
 matrix in the clockwise direction
void rotate90Clockwise(int a[N][N])
{

	// Traverse each cycle
	for (int i = 0; i < N / 2; i++) {
		for (int j = i; j < N - i - 1; j++) {

			// Swap elements of each cycle
			// in clockwise direction
			int temp = a[i][j];
			a[i][j] = a[N - 1 - j][i];
			a[N - 1 - j][i] = a[N - 1 - i][N - 1 - j];
			a[N - 1 - i][N - 1 - j] = a[j][N - 1 - i];
			a[j][N - 1 - i] = temp;
		}
	}
}




//NO OF SUBARRAY WHOSE PDT<K
int countSubArrayProductLessThanK(const vector<int>& a, int n, long long k) {
      class Solution {
public:
    int numSubarrayProductLessThanK(vector<int>& nums, int k) {
        
        int l=0;
        int pdt=1;
        int ans=0;
        for(int i=0;i<nums.size();i++){
           pdt*=nums[i];
            
            while(pdt>=k  and l<=i){
                
               pdt/=nums[l];
               l++;
            }
            //cout<<
            ans+=(i-l+1);
            
        }
        return ans;
    }
};

// A C++ program to find a peak element
// using divide and conquer
IN O(LOGN) TIME ITS NOT BS ITS DIV AND CONQ
// A binary search based function
// that returns index of a peak element
class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        if(nums.size()<=1)return 0;
        
        int l=0;
        int h=nums.size()-1;
        
        while(l<h){
            
         int mid=l+(h-l)/2;
            
            if(mid==0){
                if(nums[mid]>nums[mid+1])
                    return mid;
            }
            if(mid==h){
                if(nums[mid]>nums[mid-1])
                    return mid;
            }
          if(nums[mid]>nums[mid+1] and nums[mid]>nums[mid-1])  
             return mid;
            
             if(nums[mid]<nums[mid+1])
                l=mid+1;
            else
                h=mid-1;
            
            
        }
        return l;
    }


// C++ program to find Maximum Product Subarray
#include <bits/stdc++.h>
using namespace std;
class Solution {
public:
    int maxProduct(vector<int>& arr) {
        int n=arr.size();
        if(n<=1)return arr[0];
         int mp=arr[0];
	   int mi=arr[0];
	   int ans=arr[0];
	   for(int i=1;i<n;i++){
	       
	       if(arr[i]<0)
	       swap(mp,mi);
	       
	       mp=max(arr[i],mp*arr[i]);
	       mi=min(arr[i],mi*arr[i]);
	       ans=max(ans,mp);
	       
	   }
	   return ans;
    }


Given a binary array arr of size N and an integer M. Find the maximum number of consecutive 1's produced by flipping at most M 0's.

    int findZeroes(int arr[], int n, int m) {
       int res = 0, ct0 = 0;
    int i = 0, j = 0;
    
    while(j < n){
        
        if(arr[j] == 0)
            ct0++;
            
        while(ct0 > m){
            if(arr[i] == 0)
                ct0--;
            i++;
        }
        
        res = max(res, j - i + 1);
        j++;
    }
    
    return res;

    }  

 
 int orangesRotting(vector<vector<int>>& grid) {
        if(grid.empty()) return 0;
        int m = grid.size(), n = grid[0].size(), days = 0, tot = 0, cnt = 0;
        queue<pair<int, int>> rotten;
        for(int i = 0; i < m; ++i){
            for(int j = 0; j < n; ++j){
                if(grid[i][j] != 0) tot++;
                if(grid[i][j] == 2) rotten.push({i, j});
            }
        }
        
        int dx[4] = {0, 0, 1, -1};
        int dy[4] = {1, -1, 0, 0};
        
        while(!rotten.empty()){
            int k = rotten.size();
            cnt += k; 
            while(k--){
                int x = rotten.front().first, y = rotten.front().second;
                rotten.pop();
                for(int i = 0; i < 4; ++i){
                    int nx = x + dx[i], ny = y + dy[i];
                    if(nx < 0 || ny < 0 || nx >= m || ny >= n || grid[nx][ny] != 1) continue;
                    grid[nx][ny] = 2;
                    rotten.push({nx, ny});
                }
            }
            if(!rotten.empty()) days++;
        }
        
        return tot == cnt ? days : -}}


  void nextPermutation(vector<int>& nums) {
        //ind where dec starts
        int ind=-1;
    for(int i=nums.size()-2;i>=0;i--){
         if(nums[i]<nums[i+1]){
             ind =i;
             break;
         }
    }
        if(ind<0)
            return reverse(nums.begin(),nums.end());
    
    
    int no=-1;
    for(int j=nums.size()-1;j>ind;j--){
        if(nums[j]>nums[ind]){
            no=j;
            break;
        }
    }
    swap(nums[ind],nums[no]);
    reverse(nums.begin()+ind+1,nums.end());
}
};   
    }
//in 2 pass
  int largestRectangleArea(vector<int>& heights) {
        int n = heights.size() ; 
        vector<int> left(n , -1) , right(n , n) ; 
        stack<int> s ; 
        for(int i = 0 ; i < n ; i++) {
            while(!s.empty() && heights[i] <= heights[s.top()]) s.pop() ;
            if(s.empty())   left[i] = -1 ; //minimum element
            else    left[i] = s.top() ;
            s.push(i) ; 
        }
        while(!s.empty())   s.pop() ; 
        for(int i = n - 1 ; i >= 0 ; i--) {
            while(!s.empty() && heights[i] <= heights[s.top()]) s.pop() ;
            if(s.empty())   right[i] = n; //minimum element
            else    right[i] = s.top() ;
            s.push(i) ; 
        }
        int max_area = 0 ; 
        for(int i = 0 ; i < n ; i++) {
            max_area = max(max_area , heights[i] * (right[i] - left[i] - 1)) ;
        }
        return max_area ;
    }

//in one pass,warna next and prev smaller se bhi ho jata but in 2 pass.
 int largestRectangleArea(vector<int>& heights) {
        stack<int> st; 
        int maxA = 0; 
        int n = heights.size(); 
        for(int i = 0;i<=n;i++) {
            while(!st.empty() && (i==n || heights[st.top()] >= heights[i])) {
                int height = heights[st.top()];
                st.pop(); 
                int width; 
                if(st.empty()) width = i; 
                else width = i - st.top() - 1; 
                
                // cout << i << " " << width << " " << height << endl; 
                maxA = max(maxA, width * height); 
            }
            st.push(i); 
        }
        return maxA;
    }
