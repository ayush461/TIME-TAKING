 tree diagram
/*     8
  10           3
 1    6       14     0
0 0 9  7    13     0

*/tree:8 10 1 -1 -1 6 9 -1 -1 7 -1 -1 3 -1 14 13 -1 -1 -1
#include <iostream>
#include<cmath>
#include<queue>
using namespace std;

class node{
public:
        int data;
        node *left;
        node* right;

        node(int d){
           data=d;
           right=NULL;
           left=NULL;
        }

};
node* buildtree(){//using recursion
    int dataa;
    cin>>dataa;
 
if(dataa==-1){
    return NULL;
}
node* root=new node(dataa);
root->left=buildtree();
root->right=buildtree();
return root;
}

//count total nodes in tree 
int count(node* root){
    if(root==NULL)
    {return 0;}
    return 1+count(root->left)+count(root->right);
}


//INORDER MORRIS (O(1)->tbhi toh isko padh rhe)
//WE WILL CREATE THREADED LINKS FOR PROPER OUPTUT
vector<int> cal(Node *root){
if(root==NULL)return;
vectir<int>inord;
Node *curr=root;

while(curr!=NULL){

//1st case
if(!curr->left){
 inord.push_back(curr->val);
curr=curr->right;
}

else{
 //go to extreme right and check it is null or pointing to root(threaded part)
 Node *pre=curr->left;
 while(pre->right and pre->right!=curr)
   pre=pre->right;

  if(pre->right==NULL){
    pre->right=curr;
 //preod.push_back(pre->val);//for preod not inod baki sab same.
    curr=curr->left;
  }
else{
pre->right=NULL;
inord.push_back(pre->val);//yaha se preod ke liye ht jayega
curr=curr->right;
}

}
}
return inord;
}

// Postorder traversal
// Without recursion and without stack
vector<int> postorderTraversal(TreeNode* root)
{
    vector<int> res;
    TreeNode* current = root;
 
    while (current != NULL) {
        // If right child is null,
        // put the current node data
        // in res. Move to left child.
        if (current->right == NULL) {
            res.push_back(current->key);
            current = current->left;
        }
        else {
            TreeNode* predecessor = current->right;
            while (predecessor->left != NULL
                   && predecessor->left != current) {
                predecessor = predecessor->left;
            }
            // If left child doesn't point
            // to this node, then put in res
            // this node and make left
            // child point to this node
            if (predecessor->left == NULL) {
                res.push_back(current->key);
                predecessor->left = current;
                current = current->right;
            }
            // If the left child of inorder predecessor
            // already points to this node
            else {
                predecessor->left = NULL;
                current = current->left;
            }
        }
    }
    // reverse the res
    reverse(res.begin(), res.end());
    return res;
}

//INORDER ITERATIVE O(N);
void inOrder(struct Node *root)
{
    stack<Node *> s;
    Node *curr = root;
 
    while (curr != NULL || s.empty() == false)
    {
        /* Reach the left most Node of the
           curr Node */
        while (curr !=  NULL)
        {
            /* place pointer to a tree node on
               the stack before traversing
              the node's left subtree */
            s.push(curr);
            curr = curr->left;
        }
 
        /* Current must be NULL at this point */
        curr = s.top();
        s.pop();
 
        cout << curr->data << " ";
 
        /* we have visited the node and its
           left subtree.  Now, it's right
           subtree's turn */
        curr = curr->right;
 
    } /* end of while */
}
//PostORDER ITERATIVE IN O(N) AND O(H);
void postOrderIterative(Node* root)
{
    if (root == NULL)
        return;
 
    // Create two stacks
    stack<Node *> s1, s2;
 
    // push root to first stack
    s1.push(root);
    Node* node;
 
    // Run while first stack is not empty
    while (!s1.empty()) {
        // Pop an item from s1 and push it to s2
        node = s1.top();
        s1.pop();
        s2.push(node);
 
        // Push left and right children
        // of removed item to s1
        if (node->left)
            s1.push(node->left);
        if (node->right)
            s1.push(node->right);
    }
 
    // Print all elements of second stack
    while (!s2.empty()) {
        node = s2.top();
        s2.pop();
        cout << node->data << " ";
    }
}
 
//PREORDER ITERATIVE IN O(N) AND O(H);
void preorderIterative(Node* root)
{
    if (root == NULL)
        return;
 
    stack<Node*> st;//pushing node not data
 
    // start from root node (set current node to root node)
    Node* curr = root;
 
    // run till stack is not empty or current is
    // not NULL
    while (!st.empty() || curr != NULL) {
        // Print left children while exist
        // and keep pushing right into the
        // stack.
        while (curr != NULL) {
            cout << curr->data << " ";
 
            if (curr->right)
                st.push(curr->right);
 
            curr = curr->left;
        }
 
        // We reach when curr is NULL, so We
        // take out a right child from stack
        if (st.empty() == false) {
            curr = st.top();
            st.pop();
        }
    }


//count height of tree
int height(node* root){
    if(root==NULL){
        return 0;
    }
    int ls=height(root->left);
    int rs=height(root->right);
    return max(ls,rs) +1;
}

//print all nodes in k lvl
void kthlvl(node* root,int lvl){
    if(root==NULL){
        return ;//jitna imp yeh hai 
    }
    if(lvl==1){
        cout<<root->data<<", ";
        return ;//utna hi imp yeh hai
    }
    kthlvl(root->left,lvl-1);
    kthlvl(root->right,lvl-1);
    return ;
}
//PART OF KTH LVL RECURSION PART,print all nodes lvl by lvl
void all(node* root){
    int H=height(root);
    for(int i=0;i<=H;i++){
        kthlvl(root,i);
        cout<<endl;
    }
}
//using queue traversal LVL BYLVL
void bfs(node *root){
    queue<node*>q;
    q.push(root);
    q.push(NULL);
    while(!q.empty()){
        node *f=q.front();
           q.pop();
         if(f==NULL){
          cout<<endl;
          if(!q.empty()){
            q.push(NULL);
                        }
      }else{
        cout<<f->data<<", ";    
       
        if(f->left!=NULL){
            q.push(f->left);
        }
        if(f->right!=NULL){
            q.push(f->right);
        }
      }
    }

}

Construct Binary Tree from String with bracket representation
// Below function accepts sttring and a pointer variable as
// an argument
// and draw the tree. Returns the root of the tree
int findIndex(string str, int si, int ei)
{
    if (si > ei)
        return -1;
 
    // Inbuilt stack
    stack<char> s;
 
    for (int i = si; i <= ei; i++) {
 
        // if open parenthesis, push it
        if (str[i] == '(')
            s.push(str[i]);
 
        // if close parenthesis
        else if (str[i] == ')') {
            if (s.top() == '(') {
                s.pop();
 
                // if stack is empty, this is
                // the required index
                if (s.empty())
                    return i;
            }
        }
    }
    // if not found return -1
    return -1;
}
 
// function to construct tree from string
Node* treeFromString(string str, int si, int ei)
{
    // Base case
    if (si > ei)
        return NULL;
 
    // new root
    Node* root = newNode(str[si] - '0');
    int index = -1;
 
    // if next char is '(' find the index of
    // its complement ')'
    if (si + 1 <= ei && str[si + 1] == '(')
        index = findIndex(str, si + 1, ei);
 
    // if index found
    if (index != -1) {
 
        // call for left subtree
        root->left = treeFromString(str, si + 2, index - 1);
 
        // call for right subtree
        root->right
            = treeFromString(str, index + 2, ei - 1);
    }
    return root;
}



//geeting lvl no of a node
int getLevelUtil(node* node,
                 int data, int level)
{
    if (node == NULL)
        return 0;
 
    if (node -> data == data)
        return level;
 
    int downlevel = getLevelUtil(node -> left,
                                 data, level + 1);
    if (downlevel != 0)
        return downlevel;
 
    downlevel = getLevelUtil(node->right,
                             data, level + 1);
    return downlevel;
}
//sum of all nodes
int sum(node*node){
    if(node==NULL){
        return 0;
    } 
    return node->data +sum(node->left)+sum(node->right);
}
//right view of tree
void printr(node *root,int lvl,int &maxlvl){
    if(root==NULL){
        return;
    }
    if(lvl>maxlvl){
        cout<<root->data<<" ";
        maxlvl=lvl;
    }
    printr(root->right,lvl+1,maxlvl);
     printr(root->left,lvl+1,maxlvl);
         return;
}
//Top view of tree,get lvl order and vertical order and push node in queue with less hd dis
tc:O(N) SC:O(N)
vector<int> topView(Node *root)
    {
        //Your code here
        vector<int>ans;
        if(root==NULL) return ans;
map<int,int> m;
queue<pair<Node*,int>> q;
q.push({root,0});
while(!q.empty())
{
auto p = q.front();
Node *temp = p.first;
int hd = p.second;
q.pop();

if(m.find(hd)==m.end())//yeh line htane se bottom view bn jayega!!
m[hd] = temp->data;
if(temp->left)
q.push({temp->left,hd-1});
if(temp->right)
q.push({temp->right,hd+1});
}
for(auto i:m){
    ans.push_back(i.second);
}
return ans;

    }
 //building balanced binary search tree from given arr
 node* buidbal(int* a,int s,int e){
     if(s>e){
         return NULL;
     }
     int mid=(s+e)/2;
 node* root=new node(a[mid]);
   root->left= buidbal(a, s,mid-1);
   root->right=buidbal(a, mid+1,e);
   return root;
 }

 //making tree from given traversal(inoder is imp)
 int i=0;//we dont need to come back,yeh pre ka indexing hai
 node* makeftrav(int *ino,int *pre,int s,int e){
    
     if(s>e){
         return NULL;
     }
		if(s==e){
			return root;
			}
\     node* root=new node(pre[i]);
     int index=-1;//yeh ino ka indexing hai isliye wapis aana hoga
     for(int j=s;j<=e;j++){
         if(ino[j]==pre[i]){
         index=j;
         break;
}
     }
     i++;
     root->left=makeftrav(ino,pre,s,index-1);
     root->right=makeftrav(ino,pre,index+1,e);
     return root;

 }
//GIVEN LL TO TREE
void convert(Node *head, TreeNode *&root) {
    // Your code here
    if(head==NULL)
    return;
  queue<TreeNode*>que;
  root=new TreeNode(head->data);
  que.push(root);
  head=head->next;
  while(head!=NULL){
   TreeNode *temp=que.front();

que.pop();

temp->left=new TreeNode (head->data);
que.push(temp->left);
head=head->next;

if(head==NULL)
return;

temp->right= new TreeNode(head->data);
que.push(temp->right);
head=head->next;
}
    
    
}

 //lca of two node
 struct Node *findLCAUtil(struct Node* root, int n1, int n2, bool &v1, bool &v2)
{
    // Base case
    if (root == NULL) return NULL;
 
    // If either n1 or n2 matches with root's key, report the presence
    // by setting v1 or v2 as true and return root (Note that if a key
    // is ancestor of other, then the ancestor key becomes LCA)
    if (root->key == n1)
    {
        v1 = true;
        return root;
    }
    if (root->key == n2)
    {
        v2 = true;
        return root;
    }
 
    // Look for keys in left and right subtrees
    Node *left_lca  = findLCAUtil(root->left, n1, n2, v1, v2);
    Node *right_lca = findLCAUtil(root->right, n1, n2, v1, v2); 
    // If both of the above calls return Non-NULL, then one key
    // is present in once subtree and other is present in other,
    // So this node is the LCA
    if (left_lca && right_lca)  return root;
 
    // Otherwise check if left subtree or right subtree is LCA
    return (left_lca != NULL)? left_lca: right_lca;
}

 //finding mim dist b/w two node,find node and its lvl
 //find lca then (l1+l2)fron lca
 int finddis(node* root,int a,int b){
     
   node* lca_node=findlca(root,a,b);
   int l1=getLevelUtil(lca_node,a,0);
   int l2=getLevelUtil(lca_node,b,0);
   return l1+l2;             
      }
//check tree is comptlete or not,recursion se mei count no of nodes then anothr func mei index=0; do and inde>=no return false;

bool isCompleteBT(Node* root){
        if(root==NULL)return true;
        bool f=false;
        queue<Node *>q;
        q.push(root);
        while(!q.empty()){
        Node *temp = q.front();
           q.pop();
           if(temp == NULL) {
               f = true;
           }
           else {
               if(f == true) {
                   return false;
               }
               q.push(temp->left);
               q.push(temp->right);
           }
       }
       return true;

 

      //replace parent with child sum,postorder is applied
int replaceNodeWithSumOfChildren(node *root){
    if (root==NULL)
        {return NULL;}
             if(root->left==NULL and root->right==NULL){
         return root->data;
     }
    int leftSum =  replaceNodeWithSumOfChildren(root->left);
    int rightSum = replaceNodeWithSumOfChildren(root->right);

   int temp=root->data;
        root->data = leftSum + rightSum;
    
    return root->data +temp;
}

     maxSumNonAdjacentNodes
 class Solution{
  public:
    //Function to return the maximum sum of non-adjacent nodes.
    pair<int,int> solve(Node* root) {
        //base case
        if(root == NULL) {
            pair<int,int> p = make_pair(0,0);
            return p;
        }
        
        pair<int,int> left = solve(root->left);
        pair<int,int> right = solve(root->right);
        
        pair<int,int> res;
        
        res.first = root->data + left.second + right.second;
        
        res.second = max(left.first, left.second) + max(right.first, right.second);
        
        return res;
        
    }
    int getMaxSum(Node *root) 
    {
        pair<int,int> ans = solve(root);
        return max(ans.first, ans.second);
    }
};

//ALL NODES AT DIST K FROM TARGET 

class Solution {
    void markParents(TreeNode* root, unordered_map<TreeNode*, TreeNode*> &parent_track, TreeNode* target) {
        queue<TreeNode*> queue;
        queue.push(root);
        while(!queue.empty()) { 
            TreeNode* current = queue.front(); 
            queue.pop();
            if(current->left) {
                parent_track[current->left] = current;
                queue.push(current->left);
            }
            if(current->right) {
                parent_track[current->right] = current;
                queue.push(current->right);
            }
        }
    }
public:
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        unordered_map<TreeNode*, TreeNode*> parent_track; // node -> parent
        markParents(root, parent_track, target); 
        
        unordered_map<TreeNode*, bool> visited; 
        queue<TreeNode*> queue;
        queue.push(target);
        visited[target] = true;
        int curr_level = 0;
        while(!queue.empty()) { /*Second BFS to go upto K level from target node and using our hashtable info*/
            int size = queue.size();
            if(curr_level++ == k) break;
            for(int i=0; i<size; i++) {
                TreeNode* current = queue.front(); queue.pop();
                if(current->left && !visited[current->left]) {
                    queue.push(current->left);
                    visited[current->left] = true;
                }
                if(current->right && !visited[current->right]) {
                    queue.push(current->right);
                    visited[current->right] = true;
                }
                if(parent_track[current] && !visited[parent_track[current]]) {
                    queue.push(parent_track[current]);
                    visited[parent_track[current]] = true;
                }
            }
        }
        vector<int> result;
        while(!queue.empty()) {
            TreeNode* current = queue.front(); queue.pop();
            result.push_back(current->val);
        }
        return result;
    }


// function to print cousins of the node,IN REC WE WILL FIND LVL FIRST THEN PRINT THE NODE IN THAT LVL

int getLevel(Node *root, Node *node, int level)
{
     
    // base cases
    if (root == NULL)
        return 0;
    if (root == node)
        return level;
 
    // If node is present in left subtree
    int downlevel = getLevel(root->left,
                             node, level + 1);
    if (downlevel != 0)
        return downlevel;
 
    // If node is not present in left subtree
    return getLevel(root->right, node, level + 1);
}
 
/* Print nodes at a given level such that
sibling of node is not printed if it exists */
void printGivenLevel(Node* root, Node *node, int level)
{
    // Base cases
    if (root == NULL || level < 2)
        return;
 
    // If current node is parent of a node
    // with given level
    if (level == 2)
    {
        if (root->left == node || root->right == node)
            return;
        if (root->left)
            cout << root->left->data << " ";
        if (root->right)
            cout << root->right->data;
    }
 
    // Recur for left and right subtrees
    else if (level > 2)
    {
        printGivenLevel(root->left, node, level - 1);
        printGivenLevel(root->right, node, level - 1);
    }
}
}

//O(N), because at a node will be traversed 2 times. hence O(2N) == O(N).
//Diagonal Traversal of Binary Tree
vector <vector <int>> result;
void diagonalPrint(Node* root)
{
	if(root == NULL)
		return;

	queue <Node*> q;
	q.push(root);

	while(!q.empty())
	{
		int size = q.size();
		vector <int> answer;

		while(size--)
		{
			Node* temp = q.front();
			q.pop();

			// traversing each component;
			while(temp!=NULL)
			{
				answer.push_back(temp->data);

				if(temp->left)
					q.push(temp->left);

				temp = temp->right;
			}
		}
		result.push_back(answer);
	}
}

int main()
{
	Node* root = newNode(8);
	root->left = newNode(3);
	root->right = newNode(10);
	root->left->left = newNode(1);
	root->left->right = newNode(6);
	root->right->right = newNode(14);
	root->right->right->left = newNode(13);
	root->left->right->left = newNode(4);
	root->left->right->right = newNode(7);
	
	diagonalPrint(root);

	for(int i=0 ; i<result.size() ; i++)
	{
		for(int j=0 ; j<result[i].size() ; j++)
			cout<<result[i][j]<<" ";
		cout<<endl;
	}

	return 0;
}

// C++ program to print ancestors of given node
/* A binary tree node has data, pointer to left child
and a pointer to right child */

/* If target is present in tree, then prints the ancestors
and returns true, otherwise returns false. */
bool printAncestors(struct node *root, int target)
{
/* base cases */
if (root == NULL)
	return false;

if (root->data == target)
	return true;

/* If target is present in either left or right subtree of this node,
	then print this node */
if ( printAncestors(root->left, target) ||
	printAncestors(root->right, target) )
{
	cout << root->data << " ";
	return true;
}
//jaha se true aa rha woh path use hoga
/* Else return false */
return false;
}




   



//MAXM PATH SUM

int ans=INT_MIN;
int cal(Node* root, int &res)
{
    //Base Case
    if (root == NULL)
        return 0;
 
    // l and r store maximum path sum going through left and
    // right child of root respectively
    int l = max(cal(root->left),0);
    int r = max(cal(root->right),0);
     int tmp=root->val+l+r;
    	ans=max(ans,tmp);
      return root->val+max(l,r);
    }



void printLeaves(struct Node* root)
    {
        if (root == NULL)
            return;

        printLeaves(root->left);

        // Print it if it is a leaf node
        if (!(root->left) && !(root->right))
            cout<<(root->data);

        printLeaves(root->right);
    }


// A function to print all left boundary nodes, except a leaf node.
// Print the nodes in TOP DOWN manner
void printBoundaryLeft(struct node* root)
{
	if (root == NULL)
		return;

	if (root->left) {

		// to ensure top down order, print the node
		// before calling itself for left subtree
		printf("%d ", root->data);
		printBoundaryLeft(root->left);
	}
	else if (root->right) {
		printf("%d ", root->data);
		printBoundaryLeft(root->right);
	}
	// do nothing if it is a leaf node, this way we avoid
	// duplicates in output
}

// A function to print all right boundary nodes, except a leaf node
// Print the nodes in BOTTOM UP manner
void printBoundaryRight(struct node* root)
{
	if (root == NULL)
		return;

	if (root->right) {
		// to ensure bottom up order, first call for right
		// subtree, then print this node
		printf("%d ", root->data);
		printBoundaryRight(root->right);
		
	}
	else if (root->left) {
		printBoundaryRight(root->left);
		printf("%d ", root->data);
	}
	// do nothing if it is a leaf node, this way we avoid
	// duplicates in output
}

// A function to do boundary traversal of a given binary tree
void printBoundary(struct node* root)
{
	if (root == NULL)
		return;

	printf("%d ", root->data);

	// Print the left boundary in top-down manner.
	printBoundaryLeft(root->left);

	// Print all leaf nodes
	printLeaves(root->left);
	printLeaves(root->right);

	// Print the right boundary in bottom-up manner
	printBoundaryRight(root->right);
}



//check if tree is height bal or not h1-h2<=1 for all nodes.
f=1;
bool isBalanced(node* root,bool f)
{

    if (root == NULL) {
        return 0;
    }
 
    /* Get the heights of left and right subtrees in lh and rh
    And store the returned values in l and r */
    l = isBalanced(root->left);
    r = isBalanced(root->right);
 
    if (abs(lh - rh) >= 2)
        f=0;

        return 1+max(l,r);
}

    //find diameter of tree,O(N) time mei hai,warna O(n^2)lgta hai gerneral mei.
  public:
    int diameterOfBinaryTree(TreeNode* root) {
        int diameter = 0;
        height(root, diameter);
        return diameter;
    }
private:
    int height(TreeNode* node, int& diameter) {
        if (!node) {
            return 0;
        }
        int lh = height(node->left, diameter);
        int rh = height(node->right, diameter);
        diameter = max(diameter, lh + rh);
        return 1 + max(lh, rh);
    }

//TREE TO DLL,in PRE-ORDER FASHION.
 void solve(TreeNode *root,TreeNode *&prev)
   {
       if(!root) return;
       solve(root->right,prev);
       solve(root->left,prev);
       root->right=prev;
       root->left=NULL;
       prev=root;
   }
   


    void flatten(TreeNode* root) {
       TreeNode *prev=NULL;
       solve(root,prev); 
    }


//TREE TO CDLL

  void solve(TreeNode *root,TreeNode *&prev)
   {
       if(!root) return;
       solve(root->right,prev);
       solve(root->left,prev);
       root->right=prev;
       prev->left=root;
       prev=root;
   }
   

Node *bTreeToCList(Node *root)
    {
    //add code here.
    Node * head = NULL;
    Node * prev = NULL;
    if(root == NULL) return NULL;
    solve(root,head,prev);
    root->left = prev;
    prev->right = head;
    return head;
    }


// C++ Program to print Longest Path
// from root to leaf in a Binary tree
#include <bits/stdc++.h>
using namespace std;

// Tree node Structure
struct Node {
	int data;
	Node *left, *right;
};

struct Node* newNode(int data)
{
	struct Node* node = new Node;
	node->data = data;
	node->left = node->right = NULL;

	return (node);
}

// Function to find and return the
// longest path from root in O(N),O(N)
vector<int> longestPath(Node* root)
{

	// If root is null means there
	// is no binary tree so
	// return a empty vector
	if (root == NULL) {
		vector<int> temp
			= {};
		return temp;
	}

	// Recursive call on root->right
	vector<int> rightvect
		= longestPath(root->right);

	// Recursive call on root->left
	vector<int> leftvect
		= longestPath(root->left);

	// Compare the size of the two vectors
	// and insert current node accordingly
	if (leftvect.size() > rightvect.size())
		leftvect.push_back(root->data);

	else
		rightvect.push_back(root->data);

	// Return the appropriate vector
	return (leftvect.size() > rightvect.size()
				? leftvect
				: rightvect);
}

//All paths having sum k in bt TC:O(n*h*h)
void printKPathUtil(Node* root, vector<int>& path, int k)
{
    // empty node
    if (!root)
        return;
 
    // add current node to the path
    path.push_back(root->data);
 
    // check if there's any k sum path
    // in the left sub-tree.
    printKPathUtil(root->left, path, k);
 
    // check if there's any k sum path
    // in the right sub-tree.
    printKPathUtil(root->right, path, k);
 
    // check if there's any k sum path that
    // terminates at this node
    // Traverse the entire path as
    // there can be negative elements too
    int f = 0;
    for (int j = path.size() - 1; j >= 0; j--) {
        f += path[j];
 
        // If path sum is k, print the path
        if (f == k)
            printVector(path, j);
    }
 
    // Remove the current element from the path
    path.pop_back();
}
 


TC: O(min(M, N)),SC O(min(H1, H2))
  bool isIsomorphic(Node* n1, Node *n2) 
    { 
     // Both roots are NULL, trees isomorphic by definition 
     if (n1 == NULL && n2 == NULL) 
        return true; 
      
     // Exactly one of the n1 and n2 is NULL, trees not isomorphic 
     if (n1 == NULL || n2 == NULL) 
        return false; 
      //for leaf nodes
     if (n1->data != n2->data) 
        return false; 
      
     // There are two possible cases for n1 and n2 to be isomorphic 
     // Case 1: The subtrees rooted at these nodes have NOT been "Flipped". 
     // Both of these subtrees have to be isomorphic, hence the && 
     // Case 2: The subtrees rooted at these nodes have been "Flipped" 
     return 
     (isIsomorphic(n1->left,n2->left) && isIsomorphic(n1->right,n2->right))|| 
     (isIsomorphic(n1->left,n2->right) && isIsomorphic(n1->right,n2->left)); 
    } 

//store all path of tree in O(N),can also use stack.
void helper(Node* root,vector<int> arr,vector<vector<int>> &ans)
{
	if(!root)
		return;
	arr.push_back(root->data);
	if(root->left==NULL && root->right==NULL)
	{
	//agr stak use krte toh yaha print krne dete
	ans.push_back(arr);
	//after that we will return since we don't want to check after leaf node
		return;
	}
	/*recursively going left and right untill we find the leaf and updating the arr
	and ans vector simultaneously*/
	helper(root->left,arr,ans);
	helper(root->right,arr,ans);
		//yaha pop krte
}
vector<vector<int>> Paths(Node* root)
{
	
	vector<vector<int>> ans;
	/*if root is null than there is no further action require so return*/
	if(!root)
		return ans;
	vector<int> arr;
	
	helper(root,arr,ans);
	/*after helper function call our ans vector updated with paths so we will return ans vector*/
	return ans;
}
//for checking all the subtrees in  a given tree. in O(N) time and space.
string helper(Node* root, unordered_map<string, int>&m){
    if(!root){
        return "# ";
    }
	string s="";
	if(root->left==NULL and root->right==NULL){
		s+=to_stirng(root->data);
			return s;
}
    string node=to_string(root->data);
    node+=helper(root->left,m);
    node+=helper(root->right,m);
		m[s]++;
   
    return s;
}

vector<Node*> printAllDups(Node* root){
    vector<Node*> ans;
    unordered_map<string, int> m;
    helper(root, ans, m);
    return ans;
}


// Display Circular Link List
void displayCList(Node *head)
{
	cout << "Circular Linked List is :\n";
	Node *itr = head;
	do
	{
		cout << itr->data <<" ";
		itr = itr->right;
	} while (head!=itr);
	cout << "\n";


// C++ program to find largest BST in a
// Binary Tree.
#include <bits/stdc++.h>
using namespace std;

class NodeValue {
public:
    int maxNode, minNode, maxSize;
    
    NodeValue(int minNode, int maxNode, int maxSize) {
        this->maxNode = maxNode;
        this->minNode = minNode;
        this->maxSize = maxSize;
    }
};

class Solution {
private:
    NodeValue largestBSTSubtreeHelper(TreeNode* root) {
        // An empty tree is a BST of size 0.
        if (root==NULL) {
            return NodeValue(INT_MAX, INT_MIN, 0);
        }
        
        // Get values from left and right subtree of current tree.
        auto left = largestBSTSubtreeHelper(root->left);
        auto right = largestBSTSubtreeHelper(root->right);
        
        // Current node is greater than max in left AND smaller than min in right, it is a BST.
        if (left.maxNode < root->val && root->val < right.minNode) {
            // It is a BST.
            return NodeValue(min(root->val, left.minNode), max(root->val, right.maxNode), 
                            left.maxSize + right.maxSize + 1);
        }
        
        // Otherwise, return [-inf, inf] so that parent can't be valid BST
        return NodeValue(INT_MIN, INT_MAX, max(left.maxSize, right.maxSize));
    }
    public:
    int largestBSTSubtree(TreeNode* root) {
        return largestBSTSubtreeHelper(root).maxSize;
    }
};


// C++ program to find maximum sum in Binary Tree
// such that no two nodes are adjacent.
#include<iostream>
using namespace std;

class Node
{
public:
	int data;
	Node* left, *right;
	Node(int data)
	{
		this->data = data;
		left = NULL;
		right = NULL;
	}
};

pair<int, int> maxSumHelper(Node *root)
{
	if (root==NULL)
	{
		pair<int, int> sum(0, 0);
		return sum;
	}
	pair<int, int> sum1 = maxSumHelper(root->left);
	pair<int, int> sum2 = maxSumHelper(root->right);
	pair<int, int> sum;

	// This node is included (Left and right children
	// are not included)
	sum.first = sum1.second + sum2.second + root->data;

	// This node is excluded (Either left or right
	// child is included)
	sum.second = max(sum1.first, sum1.second) +
				max(sum2.first, sum2.second);

	return sum;
}

int maxSum(Node *root)
{
	pair<int, int> res = maxSumHelper(root);
	return max(res.first, res.second);
}


int main()
{
	/* Let us construct the following Tree
		60
	/ \
	65 70
	/
	50 */

	struct Node *root = newNode(60);
	root->left = newNode(65);
	root->right = newNode(70);
	root->left->left = newNode(50);
	printf(" Size of the largest BST is %d\n",
		largestBSTBT(root).ans);
	return 0;
}

// BURINING OF TREE

class Solution {
  public:
         Node *source;
         unordered_map<Node*,Node*>getParent;
        
         void solve(Node *root,int target){
             
             if(root==NULL) return;
             if(root->data==target) source=root;
             
             if(root->left) getParent[root->left]=root;
             if(root->right) getParent[root->right]=root;
             solve(root->left,target);
             solve(root->right,target);
         }
         
    int minTime(Node* root, int target) 
    {
        // Your code goes here
            getParent[root]=NULL;
             solve(root,target);
            
           
             unordered_map<Node*,int>vis;
           queue<Node*>q;
           q.push(source);
           int time=0;
           vis[source]=1;
           while(!q.empty()){
               
               int size=q.size();
               int  f=0;
               while(size--){
                   
                   Node *curr=q.front();
                              q.pop();
                              
                   
                    
                    if(curr->left){
                       
                       if( vis[curr->left]!=1){
                           
                           q.push(curr->left);
                            vis[curr->left]=1;
                            f=1;
                       }
                       
                   }
                   if(curr->right){
                        if( vis[curr->right]!=1){
                           
                           q.push(curr->right);
                            vis[curr->right]=1;
                            f=1;
                       }
                     
                   }
                   
                   if(getParent[curr]){
                       
                       if(vis[getParent[curr]]!=1){
                           q.push(getParent[curr]);
                            vis[getParent[curr]]=1;
                       f=1;}
                   }
                   
               }
               
               if(f==1)time++;
              
           }
         
           return time;
           
           
    }
};

int main() {
node* root=buildtree();
bfs(root);
cout<<endl;
/*
print( root);
cout<<"height of tree is "<<height(root);
//bfs(root);

int findno;
cin>>findno;
int desire=getLevelUtil(root,findno,1);
cout<<desire;
cout<<endl;
kthlvl(root,desire);

cout<<sum(root);
cout<<endl;
cout<<count(root);
cout<<endl;
int maxl=-1;
printr(root,0,maxl);
cout<<endl;
int arr[]={1,2,3,4,5,6,7};
int size=7;
node* ans=buidbal(arr, 0,size-1);
//bfs(ans);
cout<<endl;
int pt[]={1,2,3,4,8,5,6,7};
int ini[]={3,2,8,4,8,5,6,7};
int n=sizeof(pt)/sizeof(int);
node* root2=makeftrav(ini,pt,0,n-1);
//all(root);
cout<<findlca(root,10,4)->data;
//cout<<(*a);
cout<<endl;
cout<<finddis(root,14,7);*/
cout<<endl;
replaceNodeWithSumOfChildren(root);
bfs(root);

if(isheightbal(root).balance){
    cout<<"balance hai";}else{
        cout<<"not bal\n";
}
int height=0;
diameterOpt(root, &height);
   return 0;
}
