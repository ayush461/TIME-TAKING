
#include <iostream>
#include<list>
using namespace std;
//adjaency list used pura hi ek list hai
class Graph{
int V;//no of vertex
 list<int> *l;
public:
Graph(int V){
   this->V=V;
    l=new list<int>[V];
}
//shows that graph is bi-direcn
 void addedge(int x,int y){
     l[x].push_back(y);
     l[y].push_back(x);
 }
void print(){
    for(int i=0;i<V;i++){
        cout<<"Vertex "<<i<<"->";
        for(int it:l[i]){
            cout<<it<<"-> ";
        }
        cout<<endl;
    }
}

};

int main() {
   Graph g(4);
  g.addedge(0,1);
   g.addedge(0,2);
   g.addedge(2,3);
  g.addedge(1,3);
  g.print();

}

Q2 photo in copy
class Graph{
map<string,list<pair<string,int>>> m;
public:
//add edge after checking bi and adding weight
 void addedge(string x,string y,bool bi,int wt){
     m[x].push_back(make_pair(y,wt));//list wala part kr rhe theofre pushback not insert
     if(bi){
         m[y].push_back(make_pair(x,wt));
     }
     
 }
void print(){
    for(auto p:m){
        string city=p.first;
        list<pair<string,int>> a =p.second;
        cout<<city<<"-> ";
        for(auto b:a){
            cout<<b.first<<" "<<b.second<<",";
        }
        cout<<endl;
    }
    
}

};

int main() {
   Graph g;
  g.addedge("A","B",true,33);
  g.addedge("B","D",true,45);
  g.addedge("A","C",true,32);
  g.addedge("C","D",true,98);
  g.addedge("A","D",false,80);
   
  g.print();

         //          bfs traversal
void bfs(T src){
  queue<int>q;
  vector<bool> visited(V,false);
  q.push(src);
  visited[src]=true;
while(!q.empty()){
     int a=q.front();
    q.pop();
    cout<<a<<" ";
    for(auto it:m[a]){
        if(!visited[it]){
            q.push(it);
            visited[it]=true;
        }
    }
}
//dfs traversal

void dfs_help(int src,vector<bool> &visited){

cout<<src<<" ";
visited[src]=true;
//checking by ith ,ith part of list
for(auto it:l[src]){
if(!visited[it])
dfs_help(it,visited);
}
}

void dfs(int src){
vector<bool> visited(V,false);
dfs_help(src,visited);
}


//topological sort,only for directed graph(DAG)
int main() {
   //n=vertex,m=edges
   int n,m;cin>>n>>m;
   vector<int>adj[n];//arr of vector
   vector<int> indeg(n,0);
   for(int i=0;i<m;i++){
       int u,v;cin>>u>>v;
	//u->v
       adj[u].push_back(v);
       indeg[v]++;
          }
          queue<int> p;
for(int i=0;i<n;i++){//sb vertex ka 0 indegree wala ko dalo
    if(indeg[i]==0){
        p.push(i);
    }
}
   while(!p.empty()){
       int x=p.front();
       p.pop();
       cout<<x<<" ";
       
       for(auto it:adj[x])//checking neighbour
       {
           indeg[it]--;
           if(indeg[it]==0){
               p.push(it);
           }
       }
   } 
   return 0;
}


//cycle in undirtd graph,isme parent ka dhyan dena,dfs is used

bool iscycle(int src,vector<vector<int>> &adj,vector<bool> &visited,int parent){
 
     visited[src]=true;
    
    for(auto i:adj[src]){
            if(i!=parent)    {
               if( visited[i]==true) 
            return true;
}
  if(visited[i]==false and iscycle(i,adj,visited,src)==true)		
            return true;
        
    
}   
    return false;
}

void cyc(int src){
bool cycle=false;
vector<bool>visited(n,false);
for(int i=0;i<v;i++){//agr disconnectd compo hua toh 
if(!visited[i] and is cycle(i,adj,visited,-1)){
cycle=true;}
}
if(cycle)
cout<<"true";
else
cout<<"false";
}


//finding cycle in directed graph using dfs bcz bfs se toh topo hi lga dete {bs ek cnt le lena agr cnt==v then cycle ni hai warna hai(cnt is no of v haiving 0 indeg)}
bool DFSRec(vector<int> adj[], int s, bool visited[], bool recSt[])
    {
        visited[s] = true;
        recSt[s] = true;
        
        for(int u: adj[s])
        {
            if(visited[u] == false)//if not visited
            {
                if(DFSRec(adj, u, visited, recSt) == true)
                {
                    return true;
                }
            }

            else if(recSt[u] == true)//if the next element is already in the vecotor,so cycle is forming
            {
                return true;
            }
        }
        //recursion ka returning time ke wakt
        recSt[s] = false;
        return false;
    }

    public:
	//Function to detect cycle in a directed graph.
	bool isCyclic(int V, vector<int> adj[]) 
	{
	 
	   	        bool visited[V+1] = {0}, recSt[V+1] = {0};
    
        for(int i = 0; i < V; i++)//graph may not be connected 
        {
            if(visited[i] == false)
            {
                if(DFSRec(adj, i, visited, recSt) == true)
                {
                    return true;
                }
            }
        }
        
        return false;
	}
};

//snake and ladder
Class Solution {
    void getCoordinate(int n,int s, int &row, int &col){
        row = n-1-(s-1)/n;
        col = (s-1)%n;
        if((n%2==1 && row%2==1)||(n%2==0 && row%2==0))
            col = n-1-col;
    }
public:
    int snakesAndLadders(vector<vector<int>>& board) {
        int n = board.size();
        vector<bool> seen(n*n+1,false);
		seen[1] = true;
        queue<pair<int,int>> q;
		q.push({1,0});
        while(!q.empty()){
            pair<int,int> p = q.front();q.pop();
            int row,col,s = p.first, dist = p.second;
            if(s == n*n)
                return dist;
            for(int i=1;s+i<=n*n && i<=6;i++){                
                getCoordinate(n,s+i,row,col);
                int sfinal = board[row][col]==-1?s+i:board[row][col]; // check for snake or ladder
                if(seen[sfinal]==false){
                    seen[sfinal] = true;
                    q.push({sfinal,dist+1});
                }                
            }
        }
        return -1;
    }
};


void bfs_sssp(T src)
	{
		map<T, int> distance;
		map<T, T> parent;
		for (auto i : adjlist)
		{
			distance[i.first] = INT_MAX;
		}
		queue<T> q;
		q.push(src);
		distance[src] = 0;
		parent[src]=src;
		while (!q.empty())
		{
			T front_element = q.front();
			q.pop();

			for (auto neighbours : (adjlist[front_element]))
			{
				if (distance[neighbours.first] == INT_MAX)
				{
					q.push(neighbours.first);
					distance[neighbours.first] = distance[front_element] + 1;
					parent[neighbours.first] = front_element;
				}
			}
		}

		for (auto i : adjlist)
		{
			cout << "distance to " << i.first << " from  " << src << " is " << distance[i.first] << endl;
		}

		//suppose u want to know the shortest path beeen 2 nodes.
		//let destion be == g
		T temp = 'g';
		while (parent[temp] != temp)
		{

			cout << temp << "<--";
			temp = parent[temp];
		}cout << src << endl;

	}



//for detecting cycle in undirected using dsu

 class Graph{
     int V;
     list<pair<int,int>> l;
    public:
     
  Graph(int V){
     this->V=V;
 }
 void addEdge(int u,int v){
     l.push_back(make_pair(u,v));
 }
 //for finding the ultiate leader
 int find(int i,int parent[]){
 if(parent[i]==-1){
     return i;
 }  //sbko apna direct leader se jor diye aate wakt,taki O(1)ho jaye.
return parent[i]=find(parent[i],parent);//path compression
 }

 //rank=no of children it has in its set
//for joining the edges,and joining lower rank with higher
 void union_set(int x,int y,int parent[],int rank[]){
 int s1=find(x,parent);
 int s2=find(y,parent);
 if(s1!=s2){
if(rank[s1]>rank[s2]){
     parent[s2]=s1;
      rank[s1]+=rank[s2];}else{
         parent[s1]=s2;
      rank[s2]+=rank[s2];

        }
 }
 }

 //start mei sbka -1 kro then root ka value daalo array mei
 bool cycle(){
     int *parent=new int[V];
    int  *rank=new int[V];
     for(int i=0;i<V;i++){
         parent[i]=-1;
          rank[i]=1;//bcz sv apne mei hai intially
     }
     for(auto i:l){
         int o=i.first;//first edge
         int p=i.second;//second edge
         int s1=find(o,parent);
         int s2=find(p,parent);
         if(s1!=s2){
             union_set(s1,s2,parent,rank);
         }else{
             cout<<"same root"<<s1<<" "<<s2<<endl;
             return true;
         }
     }
     delete[] parent;
       delete[] rank
     return false;
 }


//heap mei only topmost ko dalo aur nikalo isliye no use here wara modificn toh set mei bhi ni hota!!
//DIJSKTRA ,ALL WEIGHT SHOULD BE +VE
Graph::Graph(int V)
{
    this->V = V;
    adj = new list< pair<int, int> >[V];
}
  
void Graph::addEdge(int u, int v, int w)
{
    adj[u].push_back(make_pair(v, w));
    adj[v].push_back(make_pair(u, w));
}
void dijkstra(T src)
	{
         vector<pii> g[n + 1];
        for (const auto& t : times) {
            g[t[0]].emplace_back(t[1], t[2]);
       }
        const int inf = 1e9;
        vector<int> dist(n + 1, inf);
        dist[k] = 0;
        priority_queue<pii, vector<pii>, greater<pii> > pq;
        pq.push({0, k});
        int u, v, w;
        while (!pq.empty()) {
            pii p = pq.top(); pq.pop();
            u = p.second;
            for (auto& to : g[u]) {
                v = to.first, w = to.second;
                if (dist[v] > dist[u] + w) {
                    dist[v] = dist[u] + w;
                    pq.push({dist[v], v});
                }
            }
        }
}



//MST
->KRUSHKAL ALGO,JUST SORT
#include<bits/stdc++.h>
using namespace std;
struct node {
    int u;
    int v;
    int wt; 
    node(int first, int second, int weight) {
        u = first;
        v = second;
        wt = weight;
    }
};

bool comp(node a, node b) {
    return a.wt < b.wt; 
}

int findPar(int u, vector<int> &parent) {
    if(u == parent[u]) return u; 
    return parent[u] = findPar(parent[u], parent); 
}

void unionn(int u, int v, vector<int> &parent, vector<int> &rank) {
    u = findPar(u, parent);
    v = findPar(v, parent);
    if(rank[u] < rank[v]) {
    	parent[u] = v;
    }
    else if(rank[v] < rank[u]) {
    	parent[v] = u; 
    }
    else {
    	parent[v] = u;
    	rank[u]++; 
    }
}
int main(){
	int N,m;
	cin >> N >> m;
	vector<node> edges; 
	for(int i = 0;i<m;i++) {
	    int u, v, wt;
	    cin >> u >> v >> wt; 
	    edges.push_back(node(u, v, wt)); 
	}
	sort(edges.begin(), edges.end(), comp); 
	
	vector<int> parent(N);
	for(int i = 0;i<N;i++) 
	    parent[i] = i; 
	vector<int> rank(N, 0); 
	
	int cost = 0;
	vector<pair<int,int>> mst; 
	for(auto it : edges) {
	    if(findPar(it.v, parent) != findPar(it.u, parent)) {
	        cost += it.wt; 
	        mst.push_back({it.u, it.v}); 
	        unionn(it.u, it.v, parent, rank); 
	    }
	}
	cout << cost << endl;
	for(auto it : mst) cout << it.first << " - " << it.second << endl; 
	return 0;
}


->PRIMS ALGO,USING VISITIED,ACTIVE EDGE AND MST V TO DIFF V

Graph::Graph(int V)
{
    this->V = V;
    adj = new list<iPair> [V];
}
 
void Graph::addEdge(int u, int v, int w)
{
    adj[u].push_back(make_pair(v, w));
    adj[v].push_back(make_pair(u, w));
}
 
// Prints shortest paths from src to all other vertices
void Graph::primMST()
{
    // Create a priority queue to store vertices that
    // are being preinMST. This is weird syntax in C++.
    // Refer below link for details of this syntax
    // http://geeksquiz.com/implement-min-heap-using-stl/
    priority_queue< iPair, vector <iPair> , greater<iPair> > pq;
 
    int src = 0; // Taking vertex 0 as source
    int ans=0;
 
    // To keep track of vertices included in MST
    vector<bool> inMST(V, false);
 
    // Insert source itself in priority queue and initialize
    // its key as 0.
    pq.push(make_pair(0, src));
 
    /* Looping till priority queue becomes empty */
    while (!pq.empty())
    {
        // The first vertex in pair is the minimum key
        // vertex, extract it from priority queue.
        // vertex label is stored in second of pair (it
        // has to be done this way to keep the vertices
        // sorted key (key must be first item
        // in pair)
        auto u = pq.top().second;
        pq.pop();
         int to=u.second;
	int weight=u.first;
          //Different key values for same vertex may exist in the priority queue.
          //The one with the least key value is always processed first.
          //Therefore, ignore the rest.
          if(inMST[u] == true){
            continue;
        }
        ans+=weight;
        inMST[u] = true;  // Include vertex in MST
 
        
        for (auto x:adj[u]){
        {
           
             //  If v is not in MST and weight of (u,v) is smaller
    
            if (inMST[x.first] == false)
            {
               
                pq.push(make_pair(x.second,x.first));
                
            }
        }
    }
 
    // Print edges of MST using parent array
    for (int i = 1; i < V; ++i)
        printf("%d - %d\n", parent[i], i);
}

 
// A C++ program for Bellman-Ford's single source IN O(EV)time
// shortest path algorithm.
#include <bits/stdc++.h>
using namespace std;

// The main function that finds shortest
// distances from src to all other vertices
// using Bellman-Ford algorithm. The function
// also detects negative weight cycle
// The row graph[i] represents i-th edge with
// three values u, v and w.
void BellmanFord(int graph[][3], int V, int E,
				int src)
{
	// Initialize distance of all vertices as infinite.
	vector<int> dis(V,INT_MAX);
	

	// initialize distance of source as 0
	dis[src] = 0;

	// Relax all edges |V| - 1 times.  A simple{bcz we know that longest path will contain n-1 vetices in b/w so,to update all we need n-1 relaxtions}
	// shortest path from src to any other
	// vertex can have at-most |V| - 1 edges
	for (int i = 0; i < V - 1; i++) {

		for (int j = 0; j < E; j++) {
			if (dis[graph[j][0]] != INT_MAX && dis[graph[j][0]] + graph[j][2] <
							dis[graph[j][1]])
				dis[graph[j][1]] =
				dis[graph[j][0]] + graph[j][2];
		}
	}

	// check for negative-weight cycles.
	// The above step guarantees shortest
	// distances if graph doesn't contain
	// negative weight cycle. If we get a
	// shorter path, then there is a cycle.
	for (int i = 0; i < E; i++) {
		int x = graph[i][0];
		int y = graph[i][1];
		int weight = graph[i][2];
		if (dis[x] != INT_MAX &&
				dis[x] + weight < dis[y])
			cout << "Graph contains negative"
					" weight cycle"
				<< endl;
	}

	cout << "Vertex Distance from Source" << endl;
	for (int i = 0; i < V; i++)
		cout << i << "\t\t" << dis[i] << endl;
}

// Driver program to test above functions
int main()
{
	int V = 5; // Number of vertices in graph
	int E = 8; // Number of edges in graph

	// Every edge has three values (u, v, w) where
	// the edge is from vertex u to v. And weight
	// of the edge is w.
	int graph[][3] = { { 0, 1, -1 }, { 0, 2, 4 },
					{ 1, 2, 3 }, { 1, 3, 2 },
					{ 1, 4, 2 }, { 3, 2, 5 },
					{ 3, 1, 1 }, { 4, 3, -3 } };

	BellmanFord(graph, V, E, 0);
	return 0;
}

BELMAN IN ADJ LIS REPRESENATION 
#include<bits/stdc++.h>
using namespace std;
struct node {
    int u;
    int v;
    int wt; 
    node(int first, int second, int weight) {
        u = first;
        v = second;
        wt = weight;
    }
};

int main(){
    int N,m;
    cin >> N >> m;
    vector<node> edges; 
    for(int i = 0;i<m;i++) {
        int u, v, wt;
        cin >> u >> v >> wt; 
        edges.push_back(node(u, v, wt)); 
    }

    int src;
    cin >> src; 


    int inf = 10000000; 
    vector<int> dist(N, inf); 

    dist[src] = 0; 

    for(int i = 1;i<=N-1;i++) {
        for(auto it: edges) {
            if(dist[it.u] + it.wt < dist[it.v]) {
                dist[it.v] = dist[it.u] + it.wt; 
            }
        }
    }

    int fl = 0; 
    for(auto it: edges) {
        if(dist[it.u] + it.wt < dist[it.v]) {
            cout << "Negative Cycle"; 
            fl = 1; 
            break; 
        }
    }

    if(!fl) {
        for(int i = 0;i<N;i++) {
            cout << i << " " << dist[i] << endl;
        }
    }


    return 0;
}
        ----------------------------------
//Rotten tomatoes
class Solution {
public:
    
    int dx[4]={0,0,1,-1};
    int dy[4]={1,-1,0,0};
    void dfs(vector<vector<int>>& grid,int i,int j,int time){
        
        grid[i][j]=time;
                
         for(int k=0;k<=3;k++){
             int x=i+dx[k];
             int y=j+dy[k];
              if(x<0 or y<0 or x>=grid.size() or y>=grid[0].size() )continue;
                
               if(grid[x][y]>time or grid[x][y]==1)
                dfs(grid,x,y,time+1);       
         }


           
    }
    int orangesRotting(vector<vector<int>>& grid) {
        
        int n=grid.size();
        int m=grid[0].size();
        int time=2;
        int ans=INT_MIN;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==2){
                    dfs(grid,i,j,time);
                    
                }
            }
        }
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1){
                    return -1;}
                   ans=max(ans,grid[i][j]); 
                            }
        }
        
        if(ans!=0)
        return ans-2;
        else
        return 0;
    }
    
};



class Solution {
public:
    int dx[4]={0,0,1,-1};
    int dy[4]={1,-1,0,0};
    int si=0;
    int k=2;
    bool che(vector<vector<int>>& grid,int i,int j,int m,int n){
        if(i>=m or j>=n or i<0 or j<0)return false;
        return true;
    }
    
    void dfs(vector<vector<int>>& grid,int i,int j,int n,int m){
        if(i>=n or j>=m or i<0 or j<0)return;
        if(grid[i][j]==0 or grid[i][j]==k)return;
        si++;
        //make visisted
        grid[i][j]=k;
        //call recursively for all 4 directions,can also use direction array
        dfs(grid,i+1,j,n,m);
         dfs(grid,i-1,j,n,m);
         dfs(grid,i,j+1,n,m);
         dfs(grid,i,j-1,n,m);
        
            
    }
    //can change only one 0 to one and count the total size.
    int largestIsland(vector<vector<int>>& grid) {
        
        int n=grid.size();
        int m=grid[0].size();
        int area=INT_MIN;
        unordered_map<int,int>mp;
        
        //do dfs and count size of each island and store in map
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1){
                    dfs(grid,i,j,n,m);
                    mp[k]=si;
                    k++;
                    si=0;
                }
            }
        }
  queue<pair<int,int>> q;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==0)
                    q.push({i,j});
            }
        }
        while(!q.empty()){
            auto p=q.front();
            q.pop();
            int x=p.first;
            int y=p.second;
			// Unordered Set to make sure the islands are unique
            unordered_set<int> s;
            int tmp=0;
            for(int i=0;i<4;i++){
                int xx=dx[i]+x;
                int yy=dy[i]+y;
                if(xx<0||yy<0||xx>=m||yy>=n)    continue;
                if(grid[xx][yy]==0)     continue;
                int val=grid[xx][yy];
                if(s.find(val)==s.end()){
                    s.insert(val);
                    tmp+=mp[val];
                }
            }
            area=max(area,tmp+1);
        }
        if(area==INT_MIN)area=m*n;
        return area;
    

    }
};


#include <bits/stdc++.h>
using namespace std;

bool isBipartite(int V, vector<int> adj[])
{
	// vector to store colour of vertex
	// assiging all to -1 i.e. uncoloured
	// colours are either 0 or 1
	// for understanding take 0 as red and 1 as blue
	vector<int> col(V, -1);

	// queue for BFS storing {vertex , colour}
	queue<pair<int, int> > q;

	//loop incase graph is not connected
	for (int i = 0; i < V; i++) {
	
	//if not coloured
		if (col[i] == -1) {
		
		//colouring with 0 i.e. red
			q.push({ i, 0 });
			col[i] = 0;
		
			while (!q.empty()) {
				pair<int, int> p = q.front();
				q.pop();
			
				//current vertex
				int v = p.first;
				//colour of current vertex
				int c = p.second;
				
				//traversing vertexes connected to current vertex
				for (int j : adj[v]) {
				
					//if already coloured with parent vertex color
					//then bipartite graph is not possible
					if (col[j] == c)
						return 0;
				
					//if uncooloured
					if (col[j] == -1) {
					//colouring with opposite color to that of parent
						col[j] = (c) ? 0 : 1;
						q.push({ j, col[j] });
					}
				}
			}
		}
	}
	//if all vertexes are coloured such that
	//no two connected vertex have same colours
	return 1;
}


// { Driver Code Starts.
int main()
{

	int V, E;
	V = 4 , E = 8;
	//adjacency list for storing graph
	vector<int> adj[V];
	adj[0] = {1,3};
	adj[1] = {0,2};
	adj[2] = {1,3};
	adj[3] = {0,2};
	

	bool ans = isBipartite(V, adj);
	//returns 1 if bipatite graph is possible
	if (ans)
		cout << "Yes\n";
	//returns 0 if bipartite graph is not possible
	else
		cout << "No\n";

	return 0;
}

// C++ Implementation of Kosaraju's algorithm to print all SCCs

void dfs(vector<int> adj[], vector<int>& vis, int s,){
        vis[s] = 1;
        for(auto& it: adj[s]) {
            if(vis[it]==0)
                dfs(adj, vis, it, flag);
        }
        
            order.push_back(s);
    }
	void rdfs(vector<int> rev[], vector<int>& vis1, int s) {
          vis1[s] = 1;
        for(auto& it: rev[s]) {
            if(vis[it]==0)
                dfs(rev, vis, it, flag);
        }
        
    }


  vector<int> order;
    int kosaraju(int V, vector<int> adj[])
    {
        order.clear();
		// make a transpose graph
        vector<int> rev[V];
        for(int i=0; i<V; i++) {
            for(auto& it: adj[i]) 
                rev[it].push_back(i);
        }

	//make order vector in returing time in org graph
        vector<int> vis(V, 0);
        for(int i=0; i<V; i++) {
            if(vis[i]==0)
           dfs(adj, vis, i);
        }
	//count tot dfs from back in order vector in transpose graph
        int ans = 0;
        vector<int> vis1(V, 0);
        for(int i=V-1; i>=0; i--) {
            if(vis1[order[i]]==0) {
                rdfs(rev, vis1, order[i]);
                ans++;
            }
        }
        return ans;
    }
    

// Driver program to test above functions
int main()
{
	// Create a graph given in the above diagram
	Graph g(5);
	g.addEdge(1, 0);
	g.addEdge(0, 2);
	g.addEdge(2, 1);
	g.addEdge(0, 3);
	g.addEdge(3, 4);

	cout << "Following are strongly connected components in "
			"given graph \n";
	g.printSCCs();

	return 0;
}

// A C++ program to find bridges in a given undirected graph
#include<iostream>
#include <list>
void dfs(int node, int parent, vector<int> &vis, vector<int> &tin, vector<int> &low, int &timer, vector<int> adj[]) {
    vis[node] = 1; 
    tin[node] = low[node] = timer++; 
    for(auto it: adj[node]) {
        if(it == parent) continue;//we dont want to go back
        
        if(!vis[it]) {
            dfs(it, node, vis, tin, low, timer, adj); 
            low[node] = min(low[node], low[it]); 
            if(low[it] > tin[node]) {
                cout << node << " " << it << endl;
            }
        } else {
            low[node] = min(low[node], tin[it]); 
        }
    }
}


int main() {
    int n, m;
    cin >> n >> m; 
	vector<int> adj[n]; 
	for(int i = 0;i<m;i++) {
	    int u, v;
	    cin >> u >> v; 
	    adj[u].push_back(v);
	    adj[v].push_back(u); 
	}
	
	vector<int> tin(n, -1);
	vector<int> low(n, -1); 
	vector<int> vis(n, 0); 
	int timer = 0; 
	for(int i = 0;i<n;i++) {
	    if(!vis[i]) {
	        dfs(i, -1, vis, tin, low, timer, adj); 
	    }
	}
	
	return 0;
}


//MIN DICE TO REACH DEST FROM SRC.,simple sssp bfs
class Solution {
    void getCoordinate(int n,int s, int &row, int &col){
        row = n-1-(s-1)/n;
        col = (s-1)%n;
        if((n%2==1 && row%2==1)||(n%2==0 && row%2==0))
            col = n-1-col;
    }
public:
    int snakesAndLadders(vector<vector<int>>& board) {
        int n = board.size();
        vector<bool> seen(n*n+1,false);
		seen[1] = true;
        queue<pair<int,int>> q;
		q.push({1,0});
        while(!q.empty()){
            pair<int,int> p = q.front();q.pop();
            int row,col,s = p.first, dist = p.second;
            if(s == n*n)
                return dist;
            for(int i=1;s+i<=n*n && i<=6;i++){                
                getCoordinate(n,s+i,row,col);
                int sfinal = board[row][col]==-1?s+i:board[row][col]; // check for snake or ladder
                if(seen[sfinal]==false){
                    seen[sfinal] = true;
                    q.push({sfinal,dist+1});
                }                
            }
        }
        return -1;
    }



//Longest Path in a Directed Acyclic Graph | Graph
vector<vector<pair<int,int> > > g(v);
    for(int i=0;i<e;i++){
        int x,y,w;
        cin>>x>>y>>w;
        g[x].push_back({y,w});
    }
 
    vector<int> vis(v,0);
    for(int i=0;i<v;i++){
        if(!vis[i]){
            topo(i,vis,g); //we will store topo order in order named vector                   
        }                                  
    }
    vector<int> dist(v);
    for(int i=0;i<v;i++) dist[i] = INT_MIN;
    dist[src] = 0;
    for(int i=v-1;i>=0;i--){
        if(dist[order[i]]!=INT_MIN){
            for(auto x:g[order[i]]){
                int v = dist[x.first];
                int w = x.second;
                int u = dist[order[i]];
                if(u + w > v)
                    dist[x.first] = u + w;
            }
        }
    }
    for(int i=0;i<v;i++){
        if(i!=src and dist[i]!=INT_MIN){
            cout<<src<<" -> "<<i<<" = "<<dist[i]<<endl;
        }
    }
 
    return 0;
 
}

Graph Colouring Problem in O(V^2+E){finding the chromatic no}
//blocking by one therofore here false means true and vice versa
vector<vector<int> > g(v);
    for(int i=0;i<e;i++){
        int x,y;
        cin>>x>>y;
        g[x].pb(y);
        g[y].pb(x);
    }

int res[v];
    bool available[v];
    res[0]=0;
    for(int i=1;i<v;i++) res[i] = -1;
    for(int i=0;i<v;i++) available[i] = false;//mtlb sb avaialble hai
 
    int cn = 0;
    for(int i=1;i<v;i++){
        for(auto x:g[i]){
            if(res[x]!=-1){
                available[res[x]] = true;
            }
        }
 
        int cr;
        for(cr=0;cr<v;cr++){
            if(available[cr] == false){
                break;
            }
        }
 
        res[i] = cr;
        cn = max(cn,cr+1);
 
        for(auto x:g[i]){
            if(res[x]!=-1){
                available[res[x]] = false;
            }
        }
    }
    cout<<cn<<endl;

//ARTICULATION POINT
#include <bits/stdc++.h>
using namespace std;
void dfs(int node, int parent, vector<int> &vis, vector<int> &tin, vector<int> &low, int &timer, vector<int> adj[], vector<int> &isArticulation) {
    vis[node] = 1; 
    tin[node] = low[node] = timer++;
    int child = 0; 
    for(auto it: adj[node]) {
        if(it == parent) continue;
        
        if(!vis[it]) {
            dfs(it, node, vis, tin, low, timer, adj, isArticulation); 
            low[node] = min(low[node], low[it]); 
	    child++; 
            if(low[it] >= tin[node] && parent != -1) {
                isArticulation[node] = 1; 
            }
        } else {
            low[node] = min(low[node], tin[it]); 
        }
    }
    //for the starting vertex only having individual child
    if(parent == -1 && child > 1) {
        isArticulation[node] = 1; 
    }
}
int main() {
    int n, m;
    cin >> n >> m; 
	vector<int> adj[n]; 
	for(int i = 0;i<m;i++) {
	    int u, v;
	    cin >> u >> v; 
	    adj[u].push_back(v);
	    adj[v].push_back(u); 
	}
	
	vector<int> tin(n, -1);
	vector<int> low(n, -1); 
	vector<int> vis(n, 0);
	vector<int> isArticulation(n, 0); 
	int timer = 0; 
	for(int i = 0;i<n;i++) {
	    if(!vis[i]) {
	        dfs(i, -1, vis, tin, low, timer, adj, isArticulation); 
	    }
	}
	
	for(int i = 0;i<n;i++) {
	    if(isArticulation[i] == 1) cout << i << endl;
	}
	
	return 0;
}